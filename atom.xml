<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Community MongoDB Aggregator</title>
	<link rel="self" href="http://www.planetmongo.org/atom.xml"/>
	<link href="http://www.planetmongo.org/"/>
	<id>http://www.planetmongo.org/atom.xml</id>
	<updated>2015-06-03T00:20:04+00:00</updated>
	<generator uri="http://www.planetplanet.org/">Planet/2.0 +http://www.planetplanet.org</generator>

	<entry xml:lang="en-us">
		<title type="html">History Repeats: MySQL, MongoDB, Percona, and Open Source</title>
		<link href="http://www.xaprb.com/blog/2015/05/22/percona-mongodb-mysql-history-repeat/"/>
		<id>http://www.xaprb.com/blog/2015/05/22/percona-mongodb-mysql-history-repeat/</id>
		<updated>2015-05-22T18:51:18+00:00</updated>
		<content type="html">&lt;p&gt;History is repeating again. MongoDB is breaking out of the niche into the
mainstream, performance and instrumentation are terrible in specific cases,
MongoDB isn&amp;rsquo;t able to fix all the problems alone, and an ecosystem is growing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.xaprb.com/media/2015/05/leaf.jpg&quot; alt=&quot;Leaf&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This should really be a series of blog posts, because there&amp;rsquo;s a book&amp;rsquo;s worth of
things happening, but I&amp;rsquo;ll summarize instead. Randomly ordered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB is in many respects closely following MySQL&amp;rsquo;s development, 10 years
offset. Single index per query, MyISAM-like storage engine, etc.
&lt;a href=&quot;http://www.xaprb.com/blog/2013/04/29/what-tokudb-might-mean-for-mongodb/&quot;&gt;Background&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tokutek built an excellent transactional storage engine and replaced
MongoDB&amp;rsquo;s, calling it TokuMX. Results were dramatically better performance
(plus ACID). MongoDB&amp;rsquo;s response was to buy WiredTiger and make it the default
storage engine in MongoDB 3.0.&lt;/li&gt;
&lt;li&gt;Percona acquired Tokutek. A book should be written about this someday. The
impact to both the MySQL and MongoDB communities cannot be overstated. This
changes everything. It also changes everything for Percona, which now has a
truly differentiated product for both database offerings. This moves them
solidly into being a product company, not just support/services/consulting; it
is a good answer to the quandary of trying to keep up with the InnoDB
engineers.&lt;/li&gt;
&lt;li&gt;Facebook acquired Parse, which is probably one of the larger MongoDB
installations.&lt;/li&gt;
&lt;li&gt;Facebook&amp;rsquo;s Mark Callaghan, among others, stopped spending all his time on
InnoDB mutexes and so forth. For the last year or so he&amp;rsquo;s been extremely
active in the MongoDB community. The MongoDB community is lucky to have a
genius of Mark&amp;rsquo;s caliber finding and solving problems. There are others, but
if Mark Callaghan is working on your open source product in earnest, you&amp;rsquo;ve
arrived.&lt;/li&gt;
&lt;li&gt;Just as in MySQL, but even earlier, there are lots of -As-A-Service providers
for MongoDB, and it&amp;rsquo;s likely a significant portion of future growth happens
here.&lt;/li&gt;
&lt;li&gt;MongoDB&amp;rsquo;s conference is jaw-droppingly expensive for a vendor, to the point of
being exclusive. At the same time, MongoDB hasn&amp;rsquo;t quite recognized and
embraced some of the things going on outside their walls. If you remember &lt;a href=&quot;https://www.percona.com/blog/2009/02/05/announcing-percona-performance-conference-2009-on-april-22-23/&quot;&gt;the
events of 2009 in the MySQL
community&lt;/a&gt;,
Percona&amp;rsquo;s &lt;a href=&quot;https://www.percona.com/news-and-events/mongodb-events/mongodb-community-openhouse&quot;&gt;announcement of an alternative MongoDB
conference&lt;/a&gt;
might feel a little like deja vu. I&amp;rsquo;m not sure of the backstory behind this,
though.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time that history is repeating in the MongoDB world, a tremendous
amount of stuff is happening quietly in other major communities too. Especially
MySQL, but also in PostgreSQL, ElasticSearch, Cassandra and other opensource
databases. I&amp;rsquo;m probably only qualified to write about the MySQL side of things;
I&amp;rsquo;m pretty sure most people don&amp;rsquo;t know a lot of the interesting things that are
going on behind the scenes that will have long-lasting effects. Maybe I&amp;rsquo;ll write
about that someday.&lt;/p&gt;

&lt;p&gt;In the meanwhile, I think we&amp;rsquo;re all in for an exciting ride as MongoDB &lt;a href=&quot;http://www.xaprb.com/blog/2013/01/10/bold-predictions-on-which-nosql-databases-will-survive/&quot;&gt;proves me right&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PS: VividCortex is building a MongoDB monitoring solution that will address many
of the shortcomings of existing ones. (We have been a bit quiet about it, just
out of busyness rather than a desire for secrecy, but now you know.) It&amp;rsquo;s in
beta now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/96dpi/3645537177/&quot;&gt;Cropped image by 96dpi&lt;/a&gt;&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry>
		<title type="html">Diving deeper into MongoDB 2.8 collection level locking performance</title>
		<link href="http://www.acmebenchmarking.com/2015/01/diving-deeper-into-mongodb-28.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-5804590304723988843</id>
		<updated>2015-05-21T21:02:36+00:00</updated>
		<content type="html">&lt;span&gt;Last month I &lt;a href=&quot;http://www.acmebenchmarking.com/2014/12/benchmarking-mongodb-28-mmapv1.html&quot; target=&quot;_blank&quot;&gt;wrote a blog&lt;/a&gt; about the closing of MongoDB ticket &lt;a href=&quot;https://jira.mongodb.org/browse/SERVER-1240&quot; target=&quot;_blank&quot;&gt;SERVER-1240&lt;/a&gt;, which brings Collection Level Locking (CLL) to the MMAPV1 storage engine in MongoDB 2.8.&amp;nbsp;&lt;/span&gt;&lt;span&gt;In MongoDB 2.6 there is a writer lock at the database level, so each database only allows one writer at a time. In concurrent write workloads, this means that all writers essentially form a single line and do their writes one at a time. In MongoDB 2.8 this lock has been moved to the collection level. Better yet is document level locking, but even though this feature was shown at &lt;a href=&quot;http://www.mongodb.com/mongodb-world/presentations&quot; target=&quot;_blank&quot;&gt;MongoDB World 2014&lt;/a&gt;&amp;nbsp;it's not going to ship. But it did make for one amazing demo by &lt;a href=&quot;https://www.linkedin.com/pub/dan-pasette/2/2b2/448&quot; target=&quot;_blank&quot;&gt;Dan&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/eliothorowitz&quot; target=&quot;_blank&quot;&gt;Eliot&lt;/a&gt;. Seriously, watch the &lt;a href=&quot;http://www.mongodb.com/presentations/mongodb-world-2014-keynote-eliot-horowitz&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt; for yourself.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The MMAPV1 engine is still important in MongoDB as it will be the default in 2.8, though the &lt;a href=&quot;http://www.zdnet.com/article/mongodb-cto-how-our-new-wiredtiger-storage-engine-will-earn-its-stripes/&quot; target=&quot;_blank&quot;&gt;plan is to make WiredTiger the default engine in MongoDB 3.0&lt;/a&gt;. Perhaps that plan explains why the performance gains aren't nearly as interesting as one might expect, as MongoDB might simply be focusing their resources on the future default engine.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I ran a &lt;a href=&quot;http://www.acmebenchmarking.com/2014/12/benchmarking-mongodb-28-mmapv1.html&quot; target=&quot;_blank&quot;&gt;series of benchmarks&lt;/a&gt; last month to see for myself how much of a performance improvement CLL makes, and the performance gains were not what I expected to see.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This month I decided to drill deeper into a specific use-case, simply inserting data into a single collection. The experiment starts with loading just one collection, then simultaneously loading two, then three, and then four. All collections for the experiments are in the same database, as the point of CLL was to eliminate the workaround of putting each collection into a different database (and each database has it's own write lock). To eliminate variables I ran on a server with plenty of RAM, so the test is not IO limited. The test environment was as follows:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;Dell R710 server : Ubuntu 14.04, 2 x Intel Xeon L5520 CPUs, 48GB RAM, 8 x 10K SAS in RAID10 (~2000 Random IOPs)&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;MongoDB 2.6.6 and 2.8.0.RC4&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Benchmark 1 : Load data into 1 .. 4 collections&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-xMRx0jpCfNc/VLPtpJt2BJI/AAAAAAAAB4s/BoV1BFiql-U/s1600/28-cll-benchmark-26-vs-28.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;354&quot; src=&quot;http://3.bp.blogspot.com/-xMRx0jpCfNc/VLPtpJt2BJI/AAAAAAAAB4s/BoV1BFiql-U/s1600/28-cll-benchmark-26-vs-28.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The raw performance by thread count is as follows:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;MongoDB 2.6.6 =&amp;nbsp;20399,&amp;nbsp;24387,&amp;nbsp;24787,&amp;nbsp;23808&lt;/span&gt;&lt;br /&gt;&lt;span&gt;MongoDB 2.8.0.RC4 =&amp;nbsp;22720,&amp;nbsp;30764,&amp;nbsp;34879,&amp;nbsp;36691&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Making the performance increase from 1-2, 2-3, and 3-4 threads:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;MongoDB 2.6.6 = +19.5%,&amp;nbsp;+1.6%, &lt;span&gt;-3.9%&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;MongoDB 2.8.0.RC4 =&amp;nbsp;+35.4%,&amp;nbsp;+11.8%,&amp;nbsp;+5.2%&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span&gt;This shows that some improvement was made, but it feels to me that there is some other bottleneck in the system. A perfectly scaling system could theoretically increase 100% from 1-2 threads, 50% from 2-3 threads, and 33% from 3-4 threads.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;I decided to rerun the experiment using MongoDB 2.8.0.RC4 with journaling disabled.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Benchmark 2 : Load data into 1 .. 4 collections, with Journaling ON and OFF&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-Apl8swJB8NA/VLP1p2DX19I/AAAAAAAAB48/nHSbB3rbOKc/s1600/28-cll-benchmark-28-journal-on-vs-off.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;354&quot; src=&quot;http://2.bp.blogspot.com/-Apl8swJB8NA/VLP1p2DX19I/AAAAAAAAB48/nHSbB3rbOKc/s1600/28-cll-benchmark-28-journal-on-vs-off.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;The raw performance by thread count is as follows:&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Journal Enabled =&amp;nbsp;22720,&amp;nbsp;30764,&amp;nbsp;34879,&amp;nbsp;36691&lt;/span&gt;&lt;br /&gt;&lt;span&gt;Journal Disabled = 37034, 71410, 103430, 129013&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Making the performance increase from 1-2, 2-3, and 3-4 threads:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;Journal Enabled =&amp;nbsp;&lt;/span&gt;&lt;span&gt;+35.4%,&amp;nbsp;+11.8%,&amp;nbsp;+5.2%&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Journal Disabled =&amp;nbsp;&lt;b&gt;+92.8%&lt;/b&gt;,&amp;nbsp;&lt;b&gt;+44.8%&lt;/b&gt;,&amp;nbsp;&lt;b&gt;+24.7%&lt;/b&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;The performance scaling looks much better here, in fact it's almost perfectly linear.&lt;/b&gt; My assumption is that MongoDB did indeed add collection level locking to the MMAPV1 storage engine in 2.8 but that a high-performance group commit algorithm was not included (or considered important).&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;If anyone with more information wants to share, please do. I'm extremely curious as to why the performance with journaling enabled hasn't improved more with collection level locking. And running without a journal is a really bad idea, IMHO.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Percona Acquires Tokutek : My Thoughts #3 : Fractal Tree Indexes</title>
		<link href="http://www.acmebenchmarking.com/2015/05/percona-acquires-tokutek-my-thoughts-3.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-4792396011832957535</id>
		<updated>2015-05-21T20:52:41+00:00</updated>
		<content type="html">&lt;span&gt;Last week I wrote up my thoughts about the Percona acquisition of Tokutek from the perspective of &lt;a href=&quot;http://www.acmebenchmarking.com/2015/04/percona-acquires-tokutek-my-thoughts-1.html&quot; target=&quot;_blank&quot;&gt;TokuDB&lt;/a&gt; and &lt;a href=&quot;http://www.acmebenchmarking.com/2015/04/percona-acquires-tokutek-my-thoughts-2.html&quot; target=&quot;_blank&quot;&gt;TokuMX[se]&lt;/a&gt;. In this third blog of the trilogy I'll cover the acquisition and the future of the Fractal Tree Index. The Fractal Tree Index is the foundational technology upon which all Tokutek products are built.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-1xCQlcZCiDk/VV5vv7vKcoI/AAAAAAAACGo/LYcTiWV1Thk/s1600/FracTree_SS.jpg&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-1xCQlcZCiDk/VV5vv7vKcoI/AAAAAAAACGo/LYcTiWV1Thk/s1600/FracTree_SS.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;So what is a Fractal Tree Index? To quote the &lt;a href=&quot;http://en.wikipedia.org/wiki/Fractal_tree_index&quot; target=&quot;_blank&quot;&gt;Wikipedia page&lt;/a&gt;:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;&quot;a Fractal Tree index is a tree data structure that keeps data sorted and allows searches and sequential access in the same time as a B-tree but with insertions and deletions that are asymptotically faster than a B-tree.&quot;&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;Fractal Tree Indexes are really cool, they enable the following capabilities in TokuDB and TokuMX[se]:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Great compression&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;High performance index maintenance&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;ACID, MVCC&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;&lt;i&gt;Lastly&lt;/i&gt;&lt;/span&gt;&lt;i&gt;&lt;span&gt;, I think it's important to  disclose that I worked at Tokutek for 3.5 years (08/2011 -  01/2015) as VP/Engineering and I do not have any equity in Tokutek or  Percona.&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;Thoughts on Percona + Fractal Tree Indexes&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt; &lt;/span&gt;&lt;br /&gt;&lt;span&gt;Files, Files, Files&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Currently, each Fractal Tree Index is stored in it's own file. The benefit of this approach is that dropping an index instantly returns all space used by the index to the filesystem and the execution of the drop-index operation is very fast. The downside is the number of files on a server can become overwhelming with a large number of tables/collections.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;I think it would be a great feature to allow users the choice of file-per-index, file-per-table, and tablespaces. &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;There is a &lt;a href=&quot;https://tokutek.atlassian.net/browse/FT-605&quot; target=&quot;_blank&quot;&gt;Jira ticket&lt;/a&gt; for the effort. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;Competition&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Things are heating up in the write-optimized storage engine space.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;MySQL: &lt;a href=&quot;http://deepis.com/insights/press-releases/deep-launches-deep-engine-leverages-machine-learning-usher-mysql-big-data&quot; target=&quot;_blank&quot;&gt;DeepDB launched at Percona Live 2015&lt;/a&gt; and &lt;a href=&quot;https://github.com/MySQLOnRocksDB/mysql-5.6/&quot; target=&quot;_blank&quot;&gt;RocksDB is working on a storage engine&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;MongoDB: &lt;a href=&quot;http://www.zdnet.com/article/mongodb-cto-how-our-new-wiredtiger-storage-engine-will-earn-its-stripes/&quot; target=&quot;_blank&quot;&gt;WiredTiger contains a yet-to-be-supported LSM implementation&lt;/a&gt; and &lt;a href=&quot;http://blog.parse.com/announcements/mongodb-rocksdb-parse/&quot; target=&quot;_blank&quot;&gt;RocksDB is already in production at Parse&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;This raises two concerns:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Choice is great for the customer, but how much room is there for these technologies to differentiate from each other?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Facebook is backing RocksDB and MongoDB is backing WiredTiger, both of these companies have vast resources. It's as much about the marketing as it is the technology.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;span&gt;Online Backup&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Tokutek's &quot;hot backup&quot; functionality is closed source and only provided with enterprise editions of TokuDB and TokuMX.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;The other backup solution is file system snapshots. &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;I'm curious to see if Percona &quot;open sources&quot; hot backup or creates a different open source hot backup technology. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Compression&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;As far as I know, the Fractal Tree Index currently supports quicklz, zlib, and lzma compression libraries.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;There are likely benefits to be had with Snappy, especially on fast storage.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;https://twitter.com/BohuTANG/status/562434664753664000&quot; target=&quot;_blank&quot;&gt;BohuTANG&lt;/a&gt; from the community seems to have a it working.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;It might be interesting to experiment with index-prefix-compression, as &lt;a href=&quot;http://www.mongodb.com/blog/post/whats-new-mongodb-30-part-3-performance-efficiency-gains-new-storage-architecture&quot; target=&quot;_blank&quot;&gt;WiredTiger has done&lt;/a&gt;. WiredTiger claims both on-disk and in-memory space savings using this technique.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Checkpointing&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Simply put, a checkpoint is a process by which a database gets to a known state on disk. Should the database server crash (or lose power) the recovery process requires starting from the checkpoint and playing forward all subsequent committed transactions.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;By default Fractal Tree Indexes checkpoint every 60 seconds.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;A checkpoint affects the server's performance in that it requires CPU, RAM, and IO.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;I assume some effort will go toward reducing the impact of a checkpoint on the running system.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Code Complexity&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;I don't have specific numbers but I suspect that the Fractal Tree Index code base is more complicated than the other open source write-optimized storage engines.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;I'm happy to be proven wrong about this if anyone wants to present their findings based on lines of code or other accepted code metrics.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;On a side note WiredTiger has some &lt;a href=&quot;http://source.wiredtiger.com/&quot; target=&quot;_blank&quot;&gt;very nice developer documentation&lt;/a&gt;, I'm not sure about the RocksDB documentation.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;License&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;From the &lt;a href=&quot;http://www.tokutek.com/resources/technology/&quot; target=&quot;_blank&quot;&gt;Tokutek website&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;Tokutek’s patented Fractal Tree indexing technology is a result of ten  years of research and development by experts in cache-oblivious  algorithmics and is protected by multiple patents.&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;The Fractal Tree Index is licensed as GNU GPL v2 &lt;u&gt;plus&lt;/u&gt; a &quot;Patent Rights Grant&quot;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Does the modified GPLv2 license affects potential users or developers?&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;&lt;span&gt;Anti-use-cases&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;I'd like to highlight a three &quot;soft spots&quot; in Fractal Tree Indexing, as in areas where there is room for improvement or simply things to be aware of.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Leftmost deletion patterns&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Fractal Tree Indexes contain large message buffers in the upper levels. These buffers provide much allow for IO &quot;avoidance&quot; of certain operations.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Consider a workload where 100 million rows are inserted using an auto-incrementing primary key, then 50 million rows are deleted. &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;At this point the Fractal Tree Index will likely have &quot;buffered&quot; the deletes (deletes are just small messages), the inserted data is still in the leaf nodes.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Queries against this deleted data will perform poorly, the extreme case is to restart your server and &quot;select min(pk) from foo;&quot;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Partitioning is one way to deal with this pattern, rather than deleting the rows you'd merely drop them one partition at a time. &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Random primary key inserts&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Fractal Tree Indexes have a huge advantage, from an IO perspective, when maintaining non-unique indexes. Insert, update, and delete operations can be buffered.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;However, unique indexes must be checked for uniqueness, and thus an IO is required unless the node holding the key is in memory.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Primary key indexes are always unique.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;So Fractal Tree Indexes perform much like a standard B-tree when randomly inserting into a primary key index. When the data set is larger than RAM, each insert will require an IO to check for uniqueness.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Latency&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Fractal Tree Indexes employ two techniques to achieve high compression&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Large block size - The default is 64KB, and can be set higher.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Algorithms - LZMA &amp;gt; zlib &amp;gt; quicklz (and Snappy is likely coming soon) &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Compression comes at a cost, latency.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;The larger the node size, the longer the decompress operation. &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;The higher the compression, the longer the decompress operation.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Users are purchasing SSD/Flash for their IO performance, but they also want high compression because these devices are expensive.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;At the moment it's complicated to determine the best combination of node size and compression algorithm, creating user-facing metrics will be helpful.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;span&gt;Human Resources&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;As with TokuDB and TokuMX[se], I'm curious to see how much Percona is&amp;nbsp; looking to grow the team.  They've already posted on their &lt;a href=&quot;http://www.percona.com/about-us/careers/open-positions&quot;&gt;jobs page&lt;/a&gt; for &quot;&lt;/span&gt;&lt;span&gt;C/C++ Developers for TokuDB, TokuMX, and Tokutek Products&quot;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Prioritizing resources between Fractal Tree Indexes, TokuDB, TokuMX, and TokuMXse will be tricky.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;Please asks questions or comment below.&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Percona Acquires Tokutek : My Thoughts #2 : TokuMX and TokuMXse</title>
		<link href="http://www.acmebenchmarking.com/2015/04/percona-acquires-tokutek-my-thoughts-2.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-7430198453412386362</id>
		<updated>2015-04-29T14:10:59+00:00</updated>
		<content type="html">&lt;span&gt;A few days ago I wrote up &lt;a href=&quot;http://www.acmebenchmarking.com/2015/04/percona-acquires-tokutek-my-thoughts-1.html?view=classic&quot; target=&quot;_blank&quot;&gt;my thoughts about the Percona acquisition of Tokutek with respect to TokuDB&lt;/a&gt;. In this blog I'm going to do the same for TokuMX and TokuMXse. And in a few days I'll wrap up this trilogy by sharing my thoughts about Fractal Tree Indexes.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;i&gt;&lt;span&gt;Again, when I'm writing up something that I was very involved with in the past I think it's important to disclose that I worked at Tokutek for 3.5 years (08/2011 -  01/2015) as VP/Engineering and I do not have any equity in Tokutek or  Percona.&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;span&gt;&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;&lt;span&gt;Since much of the MySQL crowd might be hearing about Tokutek's &quot;other products&quot; for the first time I'll provide a little history of both of the products before I dive in deeper.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;a href=&quot;http://www.tokutek.com/tokumx-for-mongodb/&quot; target=&quot;_blank&quot;&gt;TokuMX&lt;/a&gt; is a fork of MongoDB that was &lt;a href=&quot;http://www.tokutek.com/2013/06/announcing-tokumx-v1-0-tokumongo-you-can-have-it-all-2/&quot; target=&quot;_blank&quot;&gt;launched on June 19, 2013&lt;/a&gt;. It began as an experiment in late 2012 by adding Fractal Tree Indexes to handle the secondary indexing work for stock MongoDB while leaving management of the collection data to MongoDB's MMAPv1 storage code. Needless to say the &lt;a href=&quot;http://www.tokutek.com/2012/08/10x-insertion-performance-increase-for-mongodb-with-fractal-tree-indexes/&quot; target=&quot;_blank&quot;&gt;performance&lt;/a&gt; &lt;a href=&quot;http://www.tokutek.com/2012/08/268x-query-performance-increase-for-mongodb-with-fractal-tree-indexes-say-what/&quot; target=&quot;_blank&quot;&gt;gains&lt;/a&gt; of the prototype were stunning, it provided &lt;a href=&quot;http://www.tokutek.com/2013/02/mongodb-fractal-tree-indexes-high-compression/&quot; target=&quot;_blank&quot;&gt;amazing compression&lt;/a&gt;, and even &lt;a href=&quot;http://www.tokutek.com/2013/10/introducing-tokumx-transactions-for-mongodb-applications/&quot; target=&quot;_blank&quot;&gt;enabled transactions and snapshot queries&lt;/a&gt;. As a fork it, TokuMX is a drop-in replacement for MongoDB: same wire protocol, same client libraries, same commands and query syntax, etc. TokuMX has released many GA versions since the v1.0 launch in June 2013; including 1.1, 1.2, 1.3, 1.4, 1.5, and 2.0.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://www.tokutek.com/2015/02/tokutek-take-mongodb-v3-0/&quot; target=&quot;_blank&quot;&gt;TokuMXse&lt;/a&gt; is Tokutek's implementation of it's Fractal Tree Indexes in MongoDB v3.0, using the newly available Storage Engine API. One huge advantage of creating a storage engine version of TokuMX is to allow users to mix-and-match storage engines by adding a new server to a running MongoDB v3.0 replica set. A huge disadvantage is that most of the TokuMX goodness is unavailable, I'll get more into this later. Also worth noting is that&amp;nbsp;&lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek&lt;/a&gt; has not yet created a GA version of TokuMXse, the most recent information I can see is from this &lt;a href=&quot;https://groups.google.com/forum/?hl=en#!topic/tokumx-user/VOElRL1ok1Y&quot; target=&quot;_blank&quot;&gt;Google Groups post&lt;/a&gt;. I'm curious as to how/if the Percona acquisition will affect the timing of a TokuMXse GA version.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;Thoughts on Percona + TokuMX&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/b&gt; &lt;/span&gt;&lt;br /&gt;&lt;span&gt;Features - TokuMX brings the following exclusive* features to MongoDB users&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;In one of the v1.x releases TokuMX introduced partitioning, specifically to deal with performance issues relating to capped collections (the oplog was public enemy #1 when it came to killing the performance of the server). This enabled light-weight deletion of large amounts of data, just what the oplog needed. The TokuMX oplog is bounded by time (hours or days), and not size (as MongoDB is). Any TokuMX collection can be partitioned if the collection is not sharded. I believe that sharded TokuMX collections can now be partitioned but there are some significant restrictions on them. If you are curious, &lt;a href=&quot;https://twitter.com/zkasheff&quot; target=&quot;_blank&quot;&gt;Zardosht Kasheff&lt;/a&gt; wrote a lot of great content on the subject, &lt;a href=&quot;https://www.google.com/search?q=tokumx+partitioning&quot; target=&quot;_blank&quot;&gt;Google &quot;tokumx partitioning&quot;&lt;/a&gt; for blogs and documentation.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Some Fractal Tree Indexes operations can be done blindly, that is they don't require a read before a write. TokuMX enables &lt;a href=&quot;http://www.tokutek.com/2014/03/why-tokumx-replication-differs-from-mongodb-replication/&quot; target=&quot;_blank&quot;&gt;read-free replication to the secondaries&lt;/a&gt; and performs &lt;a href=&quot;http://www.tokutek.com/2014/09/fast-updates-coming-soon-in-tokumx-v2-0/&quot; target=&quot;_blank&quot;&gt;&quot;fast-updates&quot; ($inc, $set, ...)&lt;/a&gt; in a read-free manner.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;High-performance indexing, especially secondary indexes.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Document-level locking.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;High compression.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Multi-statement transactions in unsharded environments.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Snapshot queries. Queries don't need to worry about dirty-reads, or documents missing from a query because they were deleted before the reader got to them.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;TokuMX in the age of MongoDB v3.0+&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;I used an asterisk after the term &quot;exclusive&quot; in the above section as alternative storage engines will surely enable some of the named features.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;http://www.mongodb.com/press/wired-tiger&quot; target=&quot;_blank&quot;&gt;MongoDB acquired WiredTiger in December 2014&lt;/a&gt;, and is currently the only other &quot;in-the-box&quot; storage engine in MongoDB v3.0. The &lt;a href=&quot;http://www.wiredtiger.com/&quot; target=&quot;_blank&quot;&gt;WiredTiger&lt;/a&gt; storage engine provides document-level locking, compression (I haven't done much to measure it's compression vs. the Tokutek products, but I will), and will eventually provide a write-optimized options via it's &lt;a href=&quot;http://en.wikipedia.org/wiki/Log-structured_merge-tree&quot; target=&quot;_blank&quot;&gt;LSM&lt;/a&gt; implementation, but only it's B-trees are supported in MongoDB v3.0.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;http://www.rocksdb.org/&quot; target=&quot;_blank&quot;&gt;RocksDB&lt;/a&gt; powers a MongoDB v3.0 storage engine (it can be used natively and also coming as a MySQL storage engine), and it is backed by &lt;a href=&quot;http://www.facebook.com/&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;. A few weeks ago &lt;a href=&quot;https://twitter.com/mipsytipsy&quot; target=&quot;_blank&quot;&gt;Charity Majors&lt;/a&gt; at &lt;a href=&quot;https://parse.com/&quot; target=&quot;_blank&quot;&gt;Parse&lt;/a&gt; &lt;a href=&quot;http://blog.parse.com/announcements/mongodb-rocksdb-parse/&quot; target=&quot;_blank&quot;&gt;announced that Parse is running MongoDB + RocksDB and &quot;seeing great results&quot;&lt;/a&gt;. RocksDB is also an LSM implementation with compression and write-optimizations, and yes AcmeBenchmarking will be getting hands-on time with it soon.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Opportunities in 2015 (and beyond)?&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;The storage engine API is brand new in MongoDB v3.0. It appears that MongoDB is looking to enhance the API with each coming release and has announced a &lt;a href=&quot;http://www.mongodb.com/blog/post/mongodb-storage-engine-summit-june-4th&quot; target=&quot;_blank&quot;&gt;MongoDB Storage Engine Summit&lt;/a&gt; as part of &lt;a href=&quot;http://mongodbworld.com/&quot; target=&quot;_blank&quot;&gt;MongoDB World 2015&lt;/a&gt;. Storage engines and storage engine APIs are hard. It will take time for the API to improve enough to provide many of the features that TokuMX provides (since June 2013).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;WiredTiger is new to MongoDB, so much of 2015 will likely be spent learning/tweaking/fixing. At some point, maybe in 2015, MongoDB will support WiredTiger's LSM implementation which should improve secondary indexing performance significantly, especially for people with slower IO subsystems. It will likely be helpful on capped collections (think oplog).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;RocksDB is likely not tuned for many MongoDB workloads, so there will be plenty of learning to do here as well. Facebook is likely to work on it's internal use-cases before ones from the rest of the world. If it's not significantly better than WiredTiger and isn't &quot;in-the-box&quot; then there will be little reason for people to try it, but that's just my opinion.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;MongoDB Version Support&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TokuMX is based on MongoDB v2.4.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;MongoDB v2.6 was released in April 2014 and MongoDB v3.0 was released in February 2015.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;So TokuMX is now two major releases behind MongoDB and needs to catch up soon.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;Files, Files, Files&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Just like TokuDB, TokuMX creates a lot of files. Two files per collection, plus another file for each secondary index.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;On the contrary, MongoDB MMAPv1 uses &quot;tablespaces&quot; so there are far fewer files.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;However, WiredTiger creates a similar number of files as TokuMX, so maybe this is a non-issue. I'd wager that there will be a &quot;collapsing of files&quot; effort at WiredTiger at some point.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Hot Backup vs. MongoDB Backups&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TokuMX's hot backup feature is  enterprise edition only (it is a paid feature) and is closed source.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Again, it feels weird that  Percona owns/offers a closed source technology, open sourcing the TokuMX hot backup would be nice to see.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Other Enterprise Edition Features&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TokuMX also offers audit capabilities and point in time recovery as paid closed-source features.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;And again, it feels weird that  Percona owns/offers a closed source technology, open sourcing all TokuMX enterprise features would be nice to see.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;Thoughts on Percona + TokuMXse&lt;/span&gt;&lt;/b&gt;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Meh&quot; target=&quot;_blank&quot;&gt;Meh&lt;/a&gt; Factor&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Sorry, I couldn't think of a better heading for this section.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;There are so many features in TokuMX that aren't in TokuMXse.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Unless you need to inter-operate with MongoDB, use TokuMX and not TokuMXse (or if you need v2.6 or other v3.0 features)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;Release Schedule&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;As I mentioned above there have been several release candidates of TokuMXse, plus some chatter about an upcoming GA version, but nothing has materialized.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Also important is the definition of what exactly TokuMXse &quot;is&quot;.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Is it an &quot;light&quot; version of TokuMX, intended to give users a taste of the technology?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Will it be free or lower cost than TokuMX?&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;Competition&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TokuMXse has several advantages versus MMAPv1. &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;WiredTiger and RocksDB are good technology.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;WiredTiger is backed by MongoDB, RocksDB is backed by Facebook. &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;How much better is TokuMXse performance and compression in real-world usage?&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;MongoDB Storage Engine API Additions&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;It is going to be interesting to see how the API evolves over time.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Additions will surely come, but how will additions that enable a feature for a single storage engine be handled.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;General Thoughts on Percona + TokuMX[se&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Human Resources&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Percona has been performing MySQL  related engineering for quite a while now, but TokuMX[se] are very different efforts.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;TokuMX is a fork of MongoDB, not a patch.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Keeping up with new releases is a lot of work! &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;As with TokuDB, I'm curious to see how much they  are looking to grow the team after adding TokuMX[se] to their product list.  They've already posted on their &lt;a href=&quot;http://www.percona.com/about-us/careers/open-positions&quot;&gt;jobs page&lt;/a&gt; for &quot;&lt;/span&gt;&lt;span&gt;C/C++ Developers for TokuDB, TokuMX, and Tokutek Products&quot;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Prioritizing resources between TokuDB, TokuMX, and TokuMXse will be tricky.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Percona based support is attractive, IMHO.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;But their support team has no experience with TokuMX[se].&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Percona consulting also has no experience with TokuMX[se].&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;Awareness&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;The Percona brand and marketing team will significantly raise awareness to the existence of TokuMX[se].&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Existing Percona customers will be exposed to TokuMX[se], especially if they are &quot;MongoDB curious&quot;.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;The combination of these two should raise the number of TokuMX[se] customers and users.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;Please asks questions or comment below.&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Percona Acquires Tokutek : My Thoughts #1 : TokuDB</title>
		<link href="http://www.acmebenchmarking.com/2015/04/percona-acquires-tokutek-my-thoughts-1.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-4986317862176991822</id>
		<updated>2015-04-29T08:38:29+00:00</updated>
		<content type="html">&lt;span&gt;Two weeks ago Percona announced it's acquisition of Tokutek (April 14, 2015). The analyst coverage was a bit fluffy for my liking, but I decided to give it some time and see if anything &quot;meaty&quot; would come along, and ... it hasn't. The sheer number of &lt;a href=&quot;https://twitter.com/search?q=percona%20tokutek&amp;src=typd&quot;&gt;tweets on Twitter&lt;/a&gt; was impressive, which makes me hopeful that the acquisition raised awareness to the Tokutek technologies and that the Tokutek products have a found a good home&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I've been thinking a lot about the future of the Tokutek technologies over these same two weeks and want to share them publicly. I'm going to cover TokuDB in this blog post, TokuMX in a few days, and finally Fractal Tree Indexes a few days later. &lt;i&gt;[Full disclosure: I worked at Tokutek for 3.5 years (08/2011 - 01/2015) as VP/Engineering and I do not have any equity in Tokutek or Percona]&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;&lt;b&gt;&lt;span&gt;Thoughts on Percona + TokuDB&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Integration and Ease of Use&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Percona will certainly spend the time to make using the TokuDB storage engine in Percona Server as easy and foolproof as possible. Prior to the acquisition, users needed to download and install an additional package to use the TokuDB storage engine in Percona Server (this was not the case for those downloading directly from the &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek web site&lt;/a&gt; or downloading from &lt;a href=&quot;https://downloads.mariadb.org/&quot; target=&quot;_blank&quot;&gt;MariaDB&lt;/a&gt;). I hope that TokuDB becomes part of the base Percona Server package and that the plugin is installed by default. At that point the process of trying TokuDB is as easy as adding &quot;engine=TokuDB&quot; in a CREATE TABLE statement.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Memory usage (cache). InnoDB supports a user defined cache size, as does TokuDB. Users often allocate more than 50% to their cache to their storage engine and can easily over allocate the server's memory if using both engines. I'm not sure what the ideal solution is for this problem. I think InnoDB supports a dynamic cache sizing in MySQL 5.7, perhaps adding this feature to TokuDB and automatically changing the [over]allocation would work.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Foreign Keys&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Had MySQL implemented foreign key constraints above the storage engine this would have been a non-issue, but it didn't. They are implemented within InnoDB. Will foreign keys ever come to TokuDB? I'd argue that it's not worth the effort, and users needing foreign keys can always use InnoDB for those specific tables. But lack of foreign keys certainly complicates the user's experience.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Files, Files, Files&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Most people use InnoDB's file-per-table option, meaning a single file is creating in the file system for each table (I'm not going to count .frm files). In contrast, TokuDB creates 2 files for a table, and another file for each secondary index. A great benefit of this approach is that dropping an index is instantaneous, and all the space for that index is returned immediately. The downside is the sheer number of files, especially if you have a large number of tables. And a lot more files if you partition your tables (a full set of the before mentioned file for each partition).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;All TokuDB files are kept in the root of the data folder (or they can be put in a single TokuDB defined data directory). Moving the files to the individual database folders would be a nice feature.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Hot Backup vs. XtraBackup&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Creating an online backup of TokuDB is significantly different than performing the same operation of InnoDB. Percona created XtraBackup to simplify the backup process for InnoDB and it is now a feature-rich backup technology (full backups, incremental backups, etc). XtraBackup &lt;u&gt;&lt;b&gt;does not&lt;/b&gt;&lt;/u&gt; work on TokuDB tables.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;TokuDB's hot backup feature is enterprise edition only (it is the paid feature), closed source, and only supports the creation of a full backup. It does work on InnoDB tables, as long as &lt;a href=&quot;http://dev.mysql.com/doc/innodb/1.1/en/innodb-performance-aio-linux.html&quot; target=&quot;_blank&quot;&gt;asynchronous IO&lt;/a&gt; is not enabled.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;What does the future hold? It would be great to see TokuDB's hot backup functionality merged into XtraBackup so a single backup technology existed that &quot;just worked&quot; for both storage engines.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;At the moment it feels weird that Percona owns/offers a closed source technology, open sourcing the TokuDB hot backup would be nice to see.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Instrumentation and Utilities&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Percona Server is well known for the additional instrumentation it provides, it would be awesome if this operational &quot;tooling&quot; could also be applied to the TokuDB storage engine internals and exposed easy consumption.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;It will also be interesting to see if TokuDB gets more attention in Percona's &lt;a href=&quot;https://cloud.percona.com/&quot; target=&quot;_blank&quot;&gt;cloud tools&lt;/a&gt;. Percona could collect and analyze information from servers using InnoDB and make the recommendation that TokuDB be adopted by analyzing the user's workload.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;As Percona provides support to TokuDB customers and gathers feedback from the TokuDB community there will likely be features and new utilities added to the &lt;a href=&quot;http://www.percona.com/software/percona-toolkit&quot; target=&quot;_blank&quot;&gt;Percona Toolkit&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Native Partitioning&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;InnoDB is adding native partitioning in MySQL 5.7. Partitioning is currently handled by what is essentially a &quot;storage engine&quot;, which is pretty cool. A big downside to this implementation is that queries needing data from multiple partitions query each partition in order, and can take a long time when the number of partitions is large. I assume that InnoDB's long term plans for native partitioning is to support concurrent queries on multiple partitions, we shall see. Percona will need to invest in TokuDB to bring native partitioning to it as well.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;MySQL and MariaDB Support&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Will Percona assist MariaDB with the engineering/QA/packaging of TokuDB?&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Will Percona offer a MySQL version of TokuDB as Tokutek has in the past?&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Time will tell.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Human Resources&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Percona has been performing MySQL related engineering for quite a while now, but TokuDB is not exactly the same effort as XtraDB and XtraBackup. I'm curious to see how much they are looking to grow the team after adding TokuDB to their product list. They've already posted on their &lt;a href=&quot;http://www.percona.com/about-us/careers/open-positions&quot;&gt;jobs page&lt;/a&gt; for &quot;&lt;/span&gt;&lt;span&gt;C/C++ Developers for TokuDB, TokuMX, and Tokutek Products&quot;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Adding Percona based support for TokuDB is a huge win for current and future TokuDB customers.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Percona consulting will quickly learn the best workloads for TokuDB which should grow the user base (both paid and community).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;I'm excited about all of these possibilities for TokuDB.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;I will probably come up with more thoughts over time, but this feels like a good place to stop for now. I'll post my TokuMX and TokuMXse thoughts in a few days.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Please asks questions or comment below.&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">How to Purchase [Benchmarking] Hardware on a Budget</title>
		<link href="http://www.acmebenchmarking.com/2015/04/how-to-purchase-benchmarking-hardware.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-3874887240496864162</id>
		<updated>2015-04-13T15:01:36+00:00</updated>
		<content type="html">&lt;span&gt;One of my goals at Acmebenchmarking is make sure I'm running on hardware that is representative of real-world infrastructure, while at the same time doing it as inexpensively as possible.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;To date I've been running on two custom built &quot;desktops&quot; (for lack of a better term). Both have an Intel Core i7 4790K processor (quad core plus hyperthreading, 4Ghz), 32GB RAM (dual channel), and a quality SSD. They are named acmebench01 and acmebench02.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Alas, it is time to expand. &lt;i&gt;&lt;b&gt;MUST...PURCHASE...MORE...HARDWARE!&lt;/b&gt;&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;In order to maintain the inexpensive theme I tend to buy used hardware, my goal on this purchase was to achieve many more cores and greater memory bandwidth than my existing machines can provide. Keep in mind that used hardware is great for benchmarking (and likely development and QA environments) but you might want to avoid it for production. For years now I've been purchasing used hardware from &lt;a href=&quot;http://neweraserver.com/&quot;&gt;NES International&lt;/a&gt;, so I brought up their configurator and ordered the following.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;&lt;span&gt;Dell Workstation T7500&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span&gt;- (2) Intel Xeon 5560 CPU&lt;/span&gt;&lt;br /&gt;&lt;span&gt;- 48GB RAM&lt;/span&gt;&lt;br /&gt;&lt;span&gt;- 250GB SATA&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The &quot;server&quot; purchase included free shipping (at 70 pounds that is no small benefit) and landed on my doorstep for &lt;u&gt;&lt;b&gt;$819&lt;/b&gt;&lt;/u&gt;. I replaced the cheap SATA drive with a quality SSD and now have a pretty nice rig for testing workloads with high thread counts or the need for a significant bump in memory bandwidth. Again, I can't say enough about the folks at NES International (they even have an &lt;a href=&quot;http://www.ebay.com/usr/neweraserver&quot;&gt;eBay Store&lt;/a&gt;). Be careful, you might spend a lot of time looking over their stuff as they currently have over 20,000 used Dell servers for sale.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Say hello to acmebench03, (12) 2.8Ghz cores plus hyper-threading and 3 memory channels per socket. We shall see which databases and storage engines can actually harness such power!&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-KQCerHPvyaE/VSwDMzyTahI/AAAAAAAACEA/rbdOqDMVHz0/s1600/20150410_01_acmebench03-cpuinfo.jpg&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-KQCerHPvyaE/VSwDMzyTahI/AAAAAAAACEA/rbdOqDMVHz0/s1600/20150410_01_acmebench03-cpuinfo.jpg&quot; height=&quot;320&quot; width=&quot;314&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Here are a few more pictures for anyone into the hardware &quot;unboxing&quot; scene.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;span&gt;Unopened.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt; &lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-nPIR4prQDBs/VSwDSOqPYoI/AAAAAAAACEI/TE4lZnsCPYA/s1600/20150410_02_acmebench03-unopened.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-nPIR4prQDBs/VSwDSOqPYoI/AAAAAAAACEI/TE4lZnsCPYA/s1600/20150410_02_acmebench03-unopened.png&quot; height=&quot;320&quot; width=&quot;236&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span&gt;Amazing packing job.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-Whx46Hx001o/VSwDjXXB9NI/AAAAAAAACEQ/Ao1V96N7wEM/s1600/20150410_03_acmebench03-packing-job.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-Whx46Hx001o/VSwDjXXB9NI/AAAAAAAACEQ/Ao1V96N7wEM/s1600/20150410_03_acmebench03-packing-job.png&quot; height=&quot;320&quot; width=&quot;236&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Outside.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-V4UQYVpsK8g/VSwDm23odCI/AAAAAAAACEY/Lo-UgVYePqY/s1600/20150410_04_acmebench03-outside.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-V4UQYVpsK8g/VSwDm23odCI/AAAAAAAACEY/Lo-UgVYePqY/s1600/20150410_04_acmebench03-outside.png&quot; height=&quot;320&quot; width=&quot;236&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Inside.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-8qZo2nv0kKY/VSwDpqs6WkI/AAAAAAAACEg/xE5imlfu9uE/s1600/20150410_05_acmebench03-inside.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-8qZo2nv0kKY/VSwDpqs6WkI/AAAAAAAACEg/xE5imlfu9uE/s1600/20150410_05_acmebench03-inside.png&quot; height=&quot;320&quot; width=&quot;236&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">State Of The Storage Engine - DZone</title>
		<link href="http://www.xaprb.com/blog/2015/04/02/state-of-the-storage-engine/"/>
		<id>http://www.xaprb.com/blog/2015/04/02/state-of-the-storage-engine/</id>
		<updated>2015-04-02T08:51:18+00:00</updated>
		<content type="html">&lt;p&gt;I contributed an article on &lt;a href=&quot;http://www.dzone.com/articles/state-storage-engine&quot;&gt;modern database storage
engines&lt;/a&gt; to the recent
&lt;a href=&quot;http://dzone.com/research/guide-to-databases&quot;&gt;DZone Guide To Database and Persistence
Management&lt;/a&gt;. I&amp;rsquo;m cross-posting the
article below with DZone&amp;rsquo;s permission.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.xaprb.com/media/2015/04/boardwalk.jpg&quot; alt=&quot;Boardwalk&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Readers of this guide already know the database world is undergoing rapid change. From relational-only, to NoSQL and Big Data, the technologies we use for data storage and retrieval today are much different from even five years ago.&lt;/p&gt;

&lt;p&gt;Today’s datasets are so large, and the workloads so demanding, that one-size-fits-all databases rarely make much sense. When a small inefficiency is multiplied by a huge dataset, the opportunity to use a specialized database to save money, improve performance, and optimize for developer productivity and happiness can be very large. And today’s solid-state storage is vastly different from spinning disks, too. These factors are forcing fundamental changes for database internals: the underlying algorithms, file formats, and data structures. As a result, modern applications are often backed by as many as a dozen distinct types of databases (polyglot persistence). These trends signal significant, long-term change in how databases are built, chosen, and managed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Most companies can afford only one or two proper in-depth evaluations for a new database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;textbook-architectures-lose-relevance&quot;&gt;Textbook Architectures Lose Relevance&lt;/h3&gt;

&lt;p&gt;Many of today’s mature relational databases, such as MySQL, Oracle, SQL Server, and PostgreSQL, base much of their architecture and design on decades-old research into transactional storage and relational models that stem from two classic textbooks in the field—known simply as &lt;a href=&quot;http://www.amazon.com/dp/1558601902&quot;&gt;Gray &amp;amp; Reuters&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/dp/1558605088&quot;&gt;Weikum &amp;amp; Vossen&lt;/a&gt;. This “textbook architecture” can be described briefly as having:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Row-based storage with fixed schemas&lt;/li&gt;
&lt;li&gt;B-Tree primary and secondary indexes&lt;/li&gt;
&lt;li&gt;ACID transaction support&lt;/li&gt;
&lt;li&gt;Row-based locking&lt;/li&gt;
&lt;li&gt;MVCC (multi-version concurrency control) implemented by keeping old row versions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But this textbook architecture has been increasingly questioned, not only by newcomers but by leading database architects such as &lt;a href=&quot;http://slideshot.epfl.ch/play/suri_stonebraker&quot;&gt;Michael Stonebraker&lt;/a&gt;. Some new databases depart significantly from the textbook architecture with concepts such as wide-row and columnar storage, no support for concurrency at all, and eventual consistency. It’s worth noting that although NoSQL databases represent obvious changes in the data model and language—how developers access the database—not all NoSQL databases innovate architecturally. Coping with today’s data storage challenges often requires breaking from tradition architecturally, especially in the storage engine.&lt;/p&gt;

&lt;h3 id=&quot;log-structured-merge-trees&quot;&gt;Log-Structured Merge Trees&lt;/h3&gt;

&lt;p&gt;One of the more interesting trends in storage engines is the emergence of log-structured merge trees (LSM trees) as a replacement for the venerable B-Tree index. LSM trees are now about two decades old, and LevelDB is perhaps the most popular implementation. Databases such as Apache HBase, Hyperdex, Apache Cassandra, RocksDB, WiredTiger, and Riak use various types of LSM trees.&lt;/p&gt;

&lt;p&gt;LSM trees work by recording data, and changes to the data, in immutable segments or runs. The segments are usually organized into levels or generations. There are several strategies, but the first level commonly contains the most recent and active data, and lower levels usually have progressively larger and/or older data, depending on the leveling strategy. As data is inserted or changed, the top level fills up and its data is copied into a segment in the second level. Background processes merge segments in each level together, pruning out obsolete data and building lower-level segments in batches. Some LSM tree implementations add other features such as automatic compression, too. There are several benefits to this approach as compared to the classic B-Tree approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Immutable storage segments are easily cached and backed up&lt;/li&gt;
&lt;li&gt;Writes can be performed without reading first, greatly speeding them up&lt;/li&gt;
&lt;li&gt;Some difficult problems such as fragmentation are avoided or replaced by simpler problems&lt;/li&gt;
&lt;li&gt;Some workloads can experience fewer random-access I/O operations, which are slow&lt;/li&gt;
&lt;li&gt;There may be less wear on solid-state storage, which can’t update data in-place&lt;/li&gt;
&lt;li&gt;It can be possible to eliminate the B-Tree “write cliff,” which happens when the working set no longer fits in memory and writes slow down drastically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although many of the problems with B-Tree indexes can be avoided, mitigated, or transformed, LSM tree indexes aren’t a panacea. There are always trade-offs and implementation details. The main set of trade-offs for LSM trees are usually explained in terms of amplification along several dimensions. The amplification is the average ratio of the database’s physical behavior to the logical behavior of the user’s request, over the long-term. It’s usually a ratio of bytes to bytes, but can also be expressed in terms of operations, e.g. number of physical I/O operations performed per logical user request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Write amplification&lt;/strong&gt; is the multiple of bytes written by the database to bytes changed by the user. Since some LSM trees rewrite unchanging data over time, write amplification can be high in LSM trees.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read amplification&lt;/strong&gt; is how many bytes the database has to physically read to return values to the user, compared to the bytes returned. Since LSM trees may have to look in several places to find data, or to determine what the data’s most recent value is, read amplification can be high.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Space amplification&lt;/strong&gt; is how many bytes of data are stored on disk, relative to how many logical bytes the database contains. Since LSM trees don’t update in place, values that are updated often can cause space amplification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to amplification, LSM trees can have other performance problems, such as read and write bursts and stalls. It’s important to note that amplification and other issues are heavily dependent on workload, configuration of the engine, and the specific implementation. Unlike B-Tree indexes, which have essentially a single canonical implementation, LSM trees are a group of related algorithms and implementations that vary widely.&lt;/p&gt;

&lt;p&gt;There are other interesting technologies to consider besides LSM trees. One is &lt;a href=&quot;https://symas.com/getting-down-and-dirty-with-lmdb-qa-with-symas-corporations-howard-chu-about-symass-lightning-memory-mapped-database/&quot;&gt;Howard Chu&lt;/a&gt;’s LMDB (Lightning Memory-Mapped Database), which is a copy-on-write B-Tree. It is widely used and has inspired clones such as &lt;a href=&quot;https://github.com/boltdb/bolt&quot;&gt;BoltDB&lt;/a&gt;, which is the storage engine behind the up-and-coming &lt;a href=&quot;http://influxdb.com/&quot;&gt;InfluxDB&lt;/a&gt; time-series database. Another LSM alternative is &lt;a href=&quot;http://www.tokutek.com/&quot;&gt;Tokutek’s&lt;/a&gt; fractal trees, which form the basis of high-performance write and space-optimized alternatives to MySQL and MongoDB.&lt;/p&gt;

&lt;h3 id=&quot;evaluating-databases-with-log-structured-merge-trees&quot;&gt;Evaluating Databases With Log-Structured Merge Trees&lt;/h3&gt;

&lt;p&gt;No matter what underlying storage you use, there’s always a trade-off. The iron triangle of storage engines is this:&lt;/p&gt;

&lt;p&gt;You can have &lt;strong&gt;sequential reads without amplification, sequential writes without amplification, or an immutable write-once design&lt;/strong&gt;—&lt;i&gt;pick any two&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Today’s emerging Big Data use cases, in which massive datasets are kept in raw form for a long time instead of being summarized and discarded, represent some of the classes of workloads that can potentially be addressed well with LSM tree storage (time-series data is a good example). However, knowledge of the specific LSM implementation must be combined with a deep understanding of the workload, hardware, and application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;although NoSQL databases represent obvious changes in the data model and language, not all NoSQL databases innovate architecturally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes companies don’t find a database that’s optimized for their exact use case, so they build their own, often borrowing concepts from various databases and newer storage engines to achieve the efficiency and performance they need. An alternative is to adapt an efficient and trusted technology that’s almost good enough. At VividCortex, we ignore the relational features of MySQL and use it as a thin wrapper around InnoDB to store our large-scale, high-velocity time-series data.&lt;/p&gt;

&lt;p&gt;Whatever road you take, a good deal of creativity and experience is required from architects who are looking to overhaul their application’s capabilities. You can’t just assume you’ll plug in a database that will immediately fit your use case. You’ll need to take a much deeper look at the storage engine and the paradigms it is based on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Baron Schwartz&lt;/strong&gt; is the founder and CEO of &lt;a href=&quot;https://vividcortex.com&quot;&gt;VividCortex&lt;/a&gt;, the best way to see what your production database servers are doing. He is the author of High Performance MySQL and many open-source tools for MySQL administration. He’s also an Oracle ACE and frequent participant in the PostgreSQL community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To read the full report free of charge, download the
&lt;a href=&quot;http://dzone.com/research/guide-to-databases&quot;&gt;DZone Guide To Database and Persistence
Management&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cropped boardwalk image by &lt;a href=&quot;https://unsplash.com/nmsilva&quot;&gt;Nuno Silva&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry>
		<title type="html">Bad Benchmarketing and the Bar Chart</title>
		<link href="http://www.acmebenchmarking.com/2015/03/benchmarketing-charts-hurt-us-all.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-9200339677114730708</id>
		<updated>2015-03-02T13:00:06+00:00</updated>
		<content type="html">&lt;span&gt;Technical conferences are flooded with visual [mis]representations of a particular product's performance, compression, cost effectiveness, micro-transactions per flux-capacitor, or whatever two-axis comparison someone dreams up. &lt;/span&gt;&lt;span&gt;Lets be honest, benchmarketers like to believe we all suffer from &lt;a href=&quot;http://www.merriam-webster.com/dictionary/innumeracy&quot;&gt;innumeracy&lt;/a&gt;. &lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The &lt;a href=&quot;http://www.merriam-webster.com/&quot;&gt;Merriam-Webster dictionary&lt;/a&gt; defines innumeracy as follows:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;&lt;span class=&quot;ssens&quot;&gt;innumeracy (noun): marked by an ignorance of mathematics and the scientific approach &lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;a href=&quot;http://smalldatum.blogspot.com/&quot;&gt;Mark Callaghan&lt;/a&gt; has been a long time advocate of &lt;a href=&quot;http://smalldatum.blogspot.com/2014/06/benchmarketing.html&quot;&gt;explaining benchmark results&lt;/a&gt;, but that's not the point of the bar chart. Oh no, the bar chart only exists to catch your eye and draw you into the booth for further conversation.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I was attending a large name-brand conference in 2014. A well-known hardware vendor was presenting one of the keynotes. A few slides into the deck and it was &quot;Benchmark Time!&quot;, so up came the following bar chart.&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-keoyMEm27u4/VPRm_h33YJI/AAAAAAAAB-E/Q89pNWP-CuE/s1600/benchmarketing-graphs-01-original.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-keoyMEm27u4/VPRm_h33YJI/AAAAAAAAB-E/Q89pNWP-CuE/s1600/benchmarketing-graphs-01-original.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;The visualization of their data is quite dramatic. Their product, the &quot;us&quot; bar, delivering a substantially higher &quot;% Improvement&quot; over their competitions, the &quot;them&quot; bar. On a quick glance your mind tells you, &quot;wow, their product is almost 3x better than the competition&quot;. And a quick glance is all you get because presenters typically spend less than 60 seconds per slide, even less in a keynote. I've been waiting to catch this type of benchmarketer in the wild, so I quickly pulled out my phone and took a picture.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Lets break down the events that led to the above bar chart. Long before the keynote the vendor in question asked someone on their technical staff to create a scenario (benchmark) comparing their product to the competition. The request usually includes something like the following, &quot;Make sure we are measurably better than them, but not so much that people won't believe it&quot;. So the technical resource goes away, creates the benchmark, executes it, and presents the following data to the Marketing department.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;us     58.5&lt;br /&gt;them   49.0&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Now keep in mind, the &quot;us&quot; number of 58.5 &lt;i&gt;&lt;b&gt;is only 19.3% higher&lt;/b&gt;&lt;/i&gt; than the &quot;them&quot; number of 49.0. A 20% improvement in an important system metric might be huge for certain use-cases, but its not that compelling for general consumption, especially during a keynote. So marketing gets to work with the &quot;data&quot;, &lt;i&gt;which almost seems silly given that the data consists of exactly two numbers&lt;/i&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Now any good Marketer will generally fire up Microsoft Excel and see what they can do with this data. &lt;i&gt;Indeed it is almost comical to call it data, this scenario is actually just 2 values.&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;First up is what I call the purely scientific graph. Setting the y-axis range to the possible values (lets use 0 to 100 for this scenario) creates the following graph.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-LC5J9w8kREw/VPRsIIDsIaI/AAAAAAAAB-U/RfjhYNNHQiY/s1600/benchmarketing-graphs-04-0-to-100.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-LC5J9w8kREw/VPRsIIDsIaI/AAAAAAAAB-U/RfjhYNNHQiY/s1600/benchmarketing-graphs-04-0-to-100.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;Needless to say, this chart doesn't make the cut. There is too little visual difference between the two bars.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;So next up is an attempt to re-chart the data with a still scientific approach, what I like to call the &quot;we are the best&quot; chart.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-BiDfiuIf9lQ/VPRsvT78dII/AAAAAAAAB-c/ahUCfGgqIqQ/s1600/benchmarketing-graphs-03-0-to-65.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-BiDfiuIf9lQ/VPRsvT78dII/AAAAAAAAB-c/ahUCfGgqIqQ/s1600/benchmarketing-graphs-03-0-to-65.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;The goal of this chart is to set something slightly larger than our value as the maximum y value but keep the minimum value at 0, thus making the difference between &quot;us&quot; and &quot;them&quot; more apparent. As with the prior graph, this one is rejected as our awesomeness is not properly conveyed.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;So it's time to get extreme, and create the &quot;world domination&quot; graph. I've never seen one of these in the wild, but it's just a matter of time.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-B4mai6IhVwg/VPRtXt6bY4I/AAAAAAAAB-k/IeM-bhsssBw/s1600/benchmarketing-graphs-02-48-to-59.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-B4mai6IhVwg/VPRtXt6bY4I/AAAAAAAAB-k/IeM-bhsssBw/s1600/benchmarketing-graphs-02-48-to-59.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;This graph uses a value slightly larger than the &quot;us&quot; as the maximum y-axis value and something slightly smaller than the &quot;them&quot; as the minimum y-axis value. The results are stunning, we're talking order-of-magnitude improvements now. &lt;b&gt;Well done!&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;At this point the presentation starts coming together with with the above slide. Inevitably someone in engineering walks by a printer, sees the chart, and freaks out. Engineering and Marketing negotiate a peaceful settlement and we end up with the chart at the top of this blog. Not ideal, but certainly better than what might have been presented. Benchmarketing for-the-win!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;So that's it, hopefully that explains the process. Perhaps you're now a little better prepared to question what you see, and question you should. Don't be innumerate.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;I want to create a page on AcmeBenchmarking with a Benchmarketing Hall of Fame, so please send along any pictures or URLs of the bad benchmarketing &lt;/span&gt;&lt;span&gt;you've seen.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Also get involved in the comments. Any Marketers have a contrary opinion?&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">How to benchmark MongoDB</title>
		<link href="http://www.acmebenchmarking.com/2015/02/how-to-benchmark-mongodb.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-5740379561084135333</id>
		<updated>2015-02-23T14:05:58+00:00</updated>
		<content type="html">&lt;span&gt;There are generally three components to any benchmark project:&lt;/span&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;Create the benchmark application&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Execute it&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Publish your results&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span&gt;I assume many people think they want to run more benchmarks but give up since step 2 is extremely consuming as you expand the number of different configurations/scenarios.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;I'm hoping that this blog post will encourage more people to dive-in and participate, as I'll be sharing the bash script I used to test the &lt;a href=&quot;http://www.acmebenchmarking.com/2015/02/mongodb-v30-compression-benchmarks.html&quot; target=&quot;_blank&quot;&gt;various compression options coming in the MongoDB 3.0 storage engines&lt;/a&gt;. It enabled me to run a few different tests against 8 different configurations, recording insertion speed and size-on-disk for each one.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;If you're into this sort of thing, please read on and provide any feedback or improvements you can think of. You also might want to grab a Snickers, as there is a lot to cover. I've commented along the way so hopefully it is an interesting read. Also, links to the full script and configuration files are at the bottom of the blog. Lets get started!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;#!/bin/bash&lt;br /&gt;&lt;br /&gt;# remember the directory we are starting from&lt;br /&gt;#   the script expects the MongoDB configuration files&lt;br /&gt;export homeDirectory=$PWD&lt;br /&gt;&lt;br /&gt;# directory where MongoDB/TokuMX tarballs are located&lt;br /&gt;export tarDirectory=${BACKUP_DIR}/mongodb&lt;br /&gt;&lt;br /&gt;# directory used for MongoDB server binaries and data folder&lt;br /&gt;export MONGO_DIR=~/temp&lt;br /&gt;&lt;br /&gt;# perform some sanity checks&lt;br /&gt;&lt;br /&gt;# check that $MONGO_DIR is defined&lt;br /&gt;if [ -z &quot;$MONGO_DIR&quot; ]; then&lt;br /&gt;    echo &quot;Need to set MONGO_DIR&quot;&lt;br /&gt;    exit 1&lt;br /&gt;fi&lt;br /&gt;&lt;br /&gt;# check that $MONGO_DIR exists&lt;br /&gt;if [ ! -d &quot;$MONGO_DIR&quot; ]; then&lt;br /&gt;    echo &quot;Need to create directory $MONGO_DIR&quot;&lt;br /&gt;    exit 1&lt;br /&gt;fi&lt;br /&gt;&lt;br /&gt;# check that $MONGO_DIR is empty&lt;br /&gt;#   force manual cleanup before starting&lt;br /&gt;if [ &quot;$(ls -A ${MONGO_DIR})&quot; ]; then&lt;br /&gt;   echo &quot;Directory $MONGO_DIR must be empty before starting&quot;&lt;br /&gt;   exit 1&lt;br /&gt;fi&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I'm a big fan of two things at the top of all my scripts: directory locations and sanity checks. The three directories needed for this particular benchmark run are as follows:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;homeDirectory = The directory from where we are executing the script.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;tarDirectory = The directory where the tar files exist for the various MongoDB flavors/versions that we are benchmarking. You'll likely need to change this for your benchmarks.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;MONGO_DIR = The directory where we'll be unpacking the tar files (to execute the mongod binary) as well as creating a directory for storing the data for the benchmark. Make sure this is on decent storage is you are running a performance benchmark, a single SATA drive isn't fast. You'll likely need to change this for your benchmarks.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;The sanity checks follow, we want to make sure that $MONGO_DIR is defined (just in case), the the $MONGO_DIR directory exists, and that the $MONGO_DIR directory is empty. The empty check is something I think is important, you might have something interesting in that directory and should manually clear it out before starting the benchmark.&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;# decide which tarballs and configurations we want to benchmark&lt;br /&gt;#   use semi-colon list of &quot;tarball;id;config;mongo_type&quot;&lt;br /&gt;#     tarball     : MongoDB or TokuMX tarball&lt;br /&gt;#     id          : Short hand description of this particular benchmark run, ends up in the log file and the summary log&lt;br /&gt;#     config      : YAML configuration file to use for the this benchmark run&lt;br /&gt;#     mongo_type  : Identifies which &quot;type&quot; of MongoDB, tokumx|mxse|wt|mongo&lt;br /&gt;export benchmarkList=&quot;&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-tokumxse-1.0.0-rc.2.tgz;mxse_100rc2_none;tokumxse-uncompressed.conf;mxse&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-tokumxse-1.0.0-rc.2.tgz;mxse_100rc2_quicklz;tokumxse-quicklz.conf;mxse&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-tokumxse-1.0.0-rc.2.tgz;mxse_100rc2_zlib;tokumxse-zlib.conf;mxse&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-tokumxse-1.0.0-rc.2.tgz;mxse_100rc2_lzma;tokumxse-lzma.conf;mxse&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-3.0.0-rc8.tgz;mmapv1_300rc8;mmapv1.conf;mongo&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-3.0.0-rc8.tgz;wt_300rc8_none;wiredtiger-uncompressed.conf;wt&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-3.0.0-rc8.tgz;wt_300rc8_snappy;wiredtiger-snappy.conf;wt&quot;&lt;br /&gt;export benchmarkList=&quot;${benchmarkList} mongodb-linux-x86_64-3.0.0-rc8.tgz;wt_300rc8_zlib;wiredtiger-zlib.conf;wt&quot;&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Benchmarking is usually a single test run against multiple scenarios, and this is the section where we define those scenarios. The benchmarkList variable starts empty and is then appended with one or more scenarios. The scenario information is broken down into 4 segments, each delimited by a semi-colon. The comment above it is self-explanatory but worth explaining is the fourth segment, mongo_type. This script doesn't care what specific &quot;MongoDB&quot; you are running, but others I've created do so I always define it should I want it somewhere else.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;# make sure we have valid tarballs and config scripts for this benchmark run&lt;br /&gt;echo &quot;checking that all needed tarballs exist.&quot;&lt;br /&gt;for thisBenchmark in ${benchmarkList}; do&lt;br /&gt;    TARBALL=$(echo &quot;${thisBenchmark}&quot; | cut -d';' -f1)&lt;br /&gt;    MONGOD_CONFIG=$(echo &quot;${thisBenchmark}&quot; | cut -d';' -f3)&lt;br /&gt;&lt;br /&gt;    if [ -e ${tarDirectory}/${TARBALL} ]; then&lt;br /&gt;        echo &quot;  located ${tarDirectory}/${TARBALL}&quot;&lt;br /&gt;    else&lt;br /&gt;        echo &quot;  unable to locate ${tarDirectory}/${TARBALL}, exiting.&quot;&lt;br /&gt;        exit 1&lt;br /&gt;    fi&lt;br /&gt;&lt;br /&gt;    if [ -e ${MONGOD_CONFIG} ]; then&lt;br /&gt;        echo &quot;  located ${MONGOD_CONFIG}&quot;&lt;br /&gt;    else&lt;br /&gt;        echo &quot;  unable to locate ${MONGOD_CONFIG}, exiting.&quot;&lt;br /&gt;        exit 1&lt;br /&gt;    fi&lt;br /&gt;done&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span&gt;More sanity checking here. Before running any benchmarks we want to make sure that all the tar files and configuration files actually exist on the server. Nothing is more disappointing than starting a long running series of benchmarks only to come back in a day and find that some of them failed because of a type or missing file.&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;export DB_NAME=test&lt;br /&gt;export NUM_CLIENTS=2&lt;br /&gt;export DOCS_PER_CLIENT=$((512 * 80000))&lt;br /&gt;export NUM_INSERTS=$((NUM_CLIENTS * DOCS_PER_CLIENT))&lt;br /&gt;export SUMMARY_LOG_NAME=summary.log&lt;br /&gt;rm -f ${SUMMARY_LOG_NAME}&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This section allows some control over the benchmark itself, plus gives us information needed for interpreting some of the results.&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;DB_NAME = The MongoDB database we'll be inserting into.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;NUM_CLIENTS = The number of simultaneous insert clients. You can set this to any value &amp;gt;= 1, if you set it to &amp;lt; 1 you'll still get a single insert client.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;DOCS_PER_CLIENT = The number of documents a single client will insert. This is multiplied by NUM_CLIENTS to find the total number of inserts (NUM_INSERTS), and is needed to calculate inserts per second later in the script. This value of 512 * 80000 is taken directly from the Javascript code, I'd normally inject it for the benchmark but didn't due to a lack of time.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;NUM_INSERTS = Total number of inserts for the benchmark, a cooler way to do this would be to get a count from the collection itself, but that might take a while if an exact count is important and the particular storage engine supports document level locking. And remember, benchmarking isn't always about being cool, efficiency counts too.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;SUMMARY_LOG_NAME = A single log file that will contain all results, summarized. And yes, delete it if it exists.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;for thisBenchmark in ${benchmarkList}; do&lt;br /&gt;    export TARBALL=$(echo &quot;${thisBenchmark}&quot; | cut -d';' -f1)&lt;br /&gt;    export MINI_BENCH_ID=$(echo &quot;${thisBenchmark}&quot; | cut -d';' -f2)&lt;br /&gt;    export MONGOD_CONFIG=$(echo &quot;${thisBenchmark}&quot; | cut -d';' -f3)&lt;br /&gt;    export MONGO_TYPE=$(echo &quot;${thisBenchmark}&quot; | cut -d';' -f4)&lt;br /&gt;&lt;br /&gt;    echo &quot;benchmarking tarball = ${TARBALL}&quot;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span&gt;Start the loop where we benchmark each scenario by grabbing each one and cutting it into the four components. Give the user a heads up as to which TARBALL we're benchmarking this time.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # clean up + start the new server&lt;br /&gt;    &lt;br /&gt;    pushd ${MONGO_DIR}&lt;br /&gt;    if [ &quot;$?&quot; -eq 1 ]; then&lt;br /&gt;        echo &quot;Unable to pushd $MONGO_DIR, exiting.&quot;&lt;br /&gt; exit 1&lt;br /&gt;    fi&lt;br /&gt;    &lt;br /&gt;    # erase any files from the previous run&lt;br /&gt;    rm -rf *&lt;br /&gt;    &lt;br /&gt;    # untar server binaries to here&lt;br /&gt;    tar xzvf ${tarDirectory}/${TARBALL} --strip 1&lt;br /&gt;    &lt;br /&gt;    # create the &quot;data&quot; directory&lt;br /&gt;    mkdir data&lt;br /&gt;    bin/mongod --config ${homeDirectory}/${MONGOD_CONFIG}&lt;br /&gt;    popd&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span&gt;Did I mention how defensive I try to write these benchmarking scripts? Maybe paranoid is a better term. Earlier we confirmed that MONGO_DIR is defined, exists as a directory, and is empty. Guess what? Something might go terribly wrong during the benchmark and that might no longer be the case. So right after changing to the MONGO_DIR directory using pushd, check that pushd succeeded. Erase any existing files in the directory, untar the current benchmark's tarball, create a data folder, start MongoDB with the current scenario's configuration file, and popd back to our starting directory.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # wait for mongo to start&lt;br /&gt;    while [ 1 ]; do&lt;br /&gt;        $MONGO_DIR/bin/mongostat -n 1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;br /&gt;        if [ &quot;$?&quot; -eq 0 ]; then&lt;br /&gt;            break&lt;br /&gt;        fi    &lt;br /&gt;        sleep 5&lt;br /&gt;    done&lt;br /&gt;    sleep 5&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;We are starting mongod forked, so the MongoDB server isn't yet available. This code executes until the mongostat utility returns data, letting us know that the server is running.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Any ideas on a cleaner way to do this?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # log for this run&lt;br /&gt;    export LOG_NAME=${MINI_BENCH_ID}-${NUM_CLIENTS}-${NUM_INSERTS}.log&lt;br /&gt;    rm -f ${LOG_NAME}&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Create a custom log file for this particular scenario.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # TODO : log server performance with mongostat&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;If you've ever attending one of my benchmark presentations you've likely heard me say that benchmarking is never done, there is always more to measure and analyze. This script currently records overall (cumulative) inserts per second, catching mongostat output along the way would allow for creating a pretty graph over time. I highly recommend picking a way to add &quot;to-do&quot; tasks to your scripts and code, mine is as simple as &quot;TODO : &quot;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # start the first inserter&lt;br /&gt;    T=&quot;$(date +%s)&quot;&lt;br /&gt;    echo &quot;`date` | starting insert client 1&quot; | tee -a ${LOG_NAME}&lt;br /&gt;    $MONGO_DIR/bin/mongo ${DB_NAME} --eval 'load(&quot;./compress_test.js&quot;)' &amp;amp;&lt;br /&gt;    sleep 5&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This particular benchmark is simple Javascript, so we execute it using the mongo shell. Prior to starting the client we grab the current time (probably the number of seconds since the epoch) so we can calculate the total inserts per second. I include a &quot;sleep 5&quot; after this first client since it might take a bit of time for the collection to get created, I've found it's always safest to let the first insert client get started on it's own.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Again, thanks to &lt;a href=&quot;https://twitter.com/comerford&quot;&gt;Adam&lt;/a&gt; &lt;a href=&quot;http://comerford.cc/&quot;&gt;Comerford&lt;/a&gt; for sharing &lt;a href=&quot;https://comerford.cc/2015/02/04/mongodb-3-0-testing-compression/&quot;&gt;this benchmark&lt;/a&gt;. &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # start the additional insert clients&lt;br /&gt;    clientNumber=2&lt;br /&gt;    while [ ${clientNumber} -le ${NUM_CLIENTS} ]; do&lt;br /&gt;        echo &quot;`date` | starting insert client ${clientNumber}&quot; | tee -a ${LOG_NAME}&lt;br /&gt;        $MONGO_DIR/bin/mongo ${DB_NAME} --eval 'load(&quot;./compress_test.js&quot;)' &amp;amp;&lt;br /&gt;        let clientNumber=clientNumber+1&lt;br /&gt;    done&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;span&gt;If we are running 2 or more insert clients then each gets started with this loop.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # wait for all of the client(s) to finish&lt;br /&gt;    wait&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I only learned about the wait command a few months ago, and it is extremely useful. It causes our script to pause (wait) until any children processes we created are finished. So for this example each of the insert clients will finish before the script continues.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # report insert performance&lt;br /&gt;    T=&quot;$(($(date +%s)-T))&quot;&lt;br /&gt;    printf &quot;`date` | insert duration = %02d:%02d:%02d:%02d\n&quot; &quot;$((T/86400))&quot; &quot;$((T/3600%24))&quot; &quot;$((T/60%60))&quot; &quot;$((T%60))&quot; | tee -a ${LOG_NAME}&lt;br /&gt;    DOCS_PER_SEC=`echo &quot;scale=0; ${NUM_INSERTS}/${T}&quot; | bc `&lt;br /&gt;    echo &quot;`date` | inserts per second = ${DOCS_PER_SEC}&quot; | tee -a ${LOG_NAME}&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Now that the inserts are finished we find the number of elapsed seconds by subtracting the current seconds (from the epoch) from our starting time. Calculating inserts per second is a simple as dividing the number of inserts by the number of seconds.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # stop the server&lt;br /&gt;    T=&quot;$(date +%s)&quot;&lt;br /&gt;    echo &quot;`date` | shutting down the server&quot; | tee -a ${LOG_NAME}&lt;br /&gt;    $MONGO_DIR/bin/mongo admin --eval &quot;db.shutdownServer({force: true})&quot;&lt;br /&gt;&lt;br /&gt;    # wait for the MongoDB server to shutdown&lt;br /&gt;    while [ 1 ]; do&lt;br /&gt;        pgrep -U $USER mongod &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;br /&gt;        if [ &quot;$?&quot; -eq 1 ]; then&lt;br /&gt;            break&lt;br /&gt;        fi    &lt;br /&gt;        sleep 5&lt;br /&gt;    done&lt;br /&gt;    T=&quot;$(($(date +%s)-T))&quot;&lt;br /&gt;    printf &quot;`date` | shutdown duration = %02d:%02d:%02d:%02d\n&quot; &quot;$((T/86400))&quot; &quot;$((T/3600%24))&quot; &quot;$((T/60%60))&quot; &quot;$((T%60))&quot; | tee -a ${LOG_NAME}&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Prior to calculating size on disk I like to stop the server, since that allows each storage engine to perform cleanup, flush old log files, and shut down cleanly. I also like to time the operation. It's always bothered me that the MongoDB server shutdown process is asynchronous, the client requesting the shutdown is immediately disconnected with an unfriendly warning message (which one might mistake for an error).&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;In any event, the loop immediately following the db.shutdownServer() call is there to wait for the mongod process to disappear. Until it does, MongoDB is not really stopped.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Any ideas on how to improve this?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # report size on disk&lt;br /&gt;    SIZE_BYTES=`du -c --block-size=1 ${MONGO_DIR}/data | tail -n 1 | cut -f1`&lt;br /&gt;    SIZE_MB=`echo &quot;scale=2; ${SIZE_BYTES}/(1024*1024)&quot; | bc `&lt;br /&gt;    echo &quot;`date` | post-load sizing (SizeMB) = ${SIZE_MB}&quot; | tee -a ${LOG_NAME}&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Find and report the total megabytes of the data directory (dbPath). I usually only report on the specific collection and it's indexes, this is simpler in that it includes the entire data directory.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;    # put all the information into the summary log file&lt;br /&gt;    echo &quot;`date` | tech = ${MINI_BENCH_ID} | ips = ${DOCS_PER_SEC} | sizeMB = ${SIZE_MB}&quot; | tee -a ${SUMMARY_LOG_NAME}&lt;br /&gt;done&lt;/code&gt;&lt;/pre&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Having all the results go to a single summary log file make it easy to interpret and graph your results.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;So there you have it. Download the script and configuration files, make some changes, and run a few tests for yourself. Oh, give me some feedback if you can think of areas I can improve the above.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;You are well on your way to your benchmarking black belt!&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;span&gt;&lt;span&gt;Links to everything you'll need to try this at home.&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/4d15c18f9e34e1ea8a21&quot;&gt;run.benchmark.bash&lt;/a&gt; (the script we picked apart in this blog)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/d6690529c62756ce32d7&quot;&gt;&lt;span&gt;&lt;span&gt;mmapv1.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/68aa2ab4fb07cd138537&quot;&gt;&lt;span&gt;&lt;span&gt;wiredtiger-uncompressed.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/3591fa29f8d9ce1e0178&quot;&gt;&lt;span&gt;&lt;span&gt;wiredtiger-snappy.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/f068e414f6018185e92b&quot;&gt;&lt;span&gt;&lt;span&gt;wiredtiger-zlib.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/e3fe0584263585cfaeac&quot;&gt;&lt;span&gt;&lt;span&gt;tokumxse-uncompressed.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/81fef36f8ad94e462803&quot;&gt;&lt;span&gt;&lt;span&gt;tokumxse-quicklz.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/a2aba6930e88e70a3ef6&quot;&gt;&lt;span&gt;&lt;span&gt;tokumxse-zlib.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcallaghan/d3964a28a775c57d3720&quot;&gt;&lt;span&gt;&lt;span&gt;tokumxse-lzma.conf&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/comerford/e5417b57d8b4691dc55c&quot;&gt;&lt;span&gt;&lt;span&gt;compress_test.js&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">MongoDB v3.0 Compression Benchmarks</title>
		<link href="http://www.acmebenchmarking.com/2015/02/mongodb-v30-compression-benchmarks.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-4398517351647018440</id>
		<updated>2015-02-10T15:30:40+00:00</updated>
		<content type="html">&lt;span&gt;In my &lt;a href=&quot;http://www.acmebenchmarking.com/2015/02/mongodb-storage-engine-shootout-round-1.html&quot; target=&quot;_blank&quot;&gt;last&lt;/a&gt; &lt;a href=&quot;http://www.acmebenchmarking.com/2015/02/mongodb-v3-se-shootout-1a.html&quot; target=&quot;_blank&quot;&gt;two&lt;/a&gt; blogs, I compared the indexed insertion performance of the various &lt;a href=&quot;http://www.mongodb.com/&quot; target=&quot;_blank&quot;&gt;MongoDB&lt;/a&gt; v3.0 storage engines. It was interesting to see how they stacked up against each other, especially looking at the performance variability in each. Based on those results I expect the &lt;a href=&quot;http://www.wiredtiger.com/&quot; target=&quot;_blank&quot;&gt;WiredTiger&lt;/a&gt; and &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek&lt;/a&gt; developers to continue improving their respective technologies throughout 2015, there is much to be done.&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;But enough about those benchmarks, it's time for a good-old-fashioned compression test. I enjoy testing compression since it is extremely scientific. You simply insert a bunch of data then measure the size on disk. I decided to do two separate compression tests: one from &lt;a href=&quot;http://comerford.cc/&quot; target=&quot;_blank&quot;&gt;Adam&lt;/a&gt; &lt;a href=&quot;https://twitter.com/comerford&quot; target=&quot;_blank&quot;&gt;Comerford&lt;/a&gt; of MongoDB and the other a simple mongoimport test of an easily accessible data set.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;First up is a benchmark that was originally created and presented on &lt;a href=&quot;http://comerford.cc/wordpress/2015/02/04/mongodb-3-0-testing-compression/&quot; target=&quot;_blank&quot;&gt;Adam Comerford's blog&lt;/a&gt;. &lt;i&gt;I owe Adam a word for thanks as I didn't realize that MongoDB supports YAML based configuration files until I read his blog, this made my testing so much simpler.&lt;/i&gt;&amp;nbsp;Adam created a &lt;a href=&quot;https://gist.github.com/comerford/e5417b57d8b4691dc55c&quot; target=&quot;_blank&quot;&gt;small amount of Javascript&lt;/a&gt; to insert the data and recorded both size on disk and overall insert performance for his tests.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Here are the results executed on my benchmark machine, now including the results for the TokuMXse storage engine as well.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-vCqIGlS1Ar4/VNkC2IeMsJI/AAAAAAAAB78/7E-Ulo6b_WM/s1600/se-shootout-02-adamc-compression-size.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-vCqIGlS1Ar4/VNkC2IeMsJI/AAAAAAAAB78/7E-Ulo6b_WM/s1600/se-shootout-02-adamc-compression-size.png&quot; height=&quot;426&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Size-wise, TokuMXse is 8.2% smaller than WiredTiger using zlib compression. This is interesting, especially since WiredTiger is using zlib level 6, versus TokuMXse using zlib level 5. The higher the number, and it goes up to 9, the more aggressive the compression. TokuMXse with lzma compression is far and away the winner here, as the on-disk size is 31.1% smaller than WiredTiger/zlib.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;&lt;b&gt;Note&lt;/b&gt;: it's important to keep in mind the balance between compression and performance, especially when it comes to query performance. The more aggressive the compression, like lzma versus zlib, or the more aggressive the zlib level, the longer it takes to decompress the data for reads/updates.&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span&gt;And for that same benchmark, here are the insert performance numbers measured in documents inserted per second.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-37s7efPfxVs/VNn_WRixrxI/AAAAAAAAB8s/lYij_8g_gLs/s1600/se-shootout-02-adamc-compression-speed.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-37s7efPfxVs/VNn_WRixrxI/AAAAAAAAB8s/lYij_8g_gLs/s1600/se-shootout-02-adamc-compression-speed.png&quot; height=&quot;426&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;The only surprise here is that WiredTiger with zlib is so much slower than WiredTiger with snappy, specifically 35.1%. I'm curious to understand why that is the case. Anyone?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;&lt;b&gt;&lt;span&gt;Edit : 2015-02-10 : As Adam Comerford pointed out in Twitter and in a comment to this blog, the performance issue is in WiredTiger's zlib compression on the journal. A repeat test without journal compression showed good insert performance (similar to none and snappy).&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;My second compression benchmark uses a data set available from &lt;a href=&quot;https://twitter.com/andy_pavlo&quot; target=&quot;_blank&quot;&gt;Andy Pavlo's&lt;/a&gt; &lt;a href=&quot;http://www.cs.cmu.edu/~pavlo/datasets/index.html&quot; target=&quot;_blank&quot;&gt;Collected Data Sets&lt;/a&gt;, specifically the &lt;a href=&quot;http://www.cs.brown.edu/~pavlo/torrent/peersnapshots-01.csv.gz&quot; target=&quot;_blank&quot;&gt;BitTorrent Peer Snapshot Part 1&lt;/a&gt;. For each test I start with an empty MongoDB server with the appropriate storage engine and, if applicable, compression settings. I think this data set is more real-world than Adam's Javascript data generator.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;First up are the compression numbers.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-AP6ez18phq0/VNkFtBph-9I/AAAAAAAAB8U/51I0Xn3pDqs/s1600/se-shootout-02-andyp-compression-size.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-AP6ez18phq0/VNkFtBph-9I/AAAAAAAAB8U/51I0Xn3pDqs/s1600/se-shootout-02-andyp-compression-size.png&quot; height=&quot;426&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Again, the TokuMXse/zlib size on disk was smaller than WiredTiger/zlib, this time at 7%. TokuMXse/lzma was 28% smaller than WiredTiger/zlib.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Most interesting to me were the performance results for this test, again measured in number of documents inserted per second.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-O9C4tLKdaBY/VNn_fjNMa6I/AAAAAAAAB80/8LrxBIF6TTg/s1600/se-shootout-02-andyp-compression-speed.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-O9C4tLKdaBY/VNn_fjNMa6I/AAAAAAAAB80/8LrxBIF6TTg/s1600/se-shootout-02-andyp-compression-speed.png&quot; height=&quot;426&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;In this test WiredTiger was 55% slower using zlib than snappy. TokuMXse performance was relatively unchanged throughout the test.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;To recap from these benchmarks:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TokuMXse is around 7% smaller than WiredTiger with zlib, and substantially smaller with lzma.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;WiredTiger insertion performance is significantly slower with zlib than snappy. Side note, I see nothing in the &lt;a href=&quot;https://jira.mongodb.org/&quot; target=&quot;_blank&quot;&gt;MongoDB Jira&lt;/a&gt; in regards to this issue.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;MMAPv1 insert performance was the best of the bunch, but it's size-on-disk is just awful.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;Next week I'm going to publish and explain the &lt;i&gt;&lt;u&gt;simple&lt;/u&gt;&lt;/i&gt; bash scripts I created for this round of benchmarks.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">MongoDB v3.0 Storage Engine Shootout : Round 1a : WiredTiger and directIO</title>
		<link href="http://www.acmebenchmarking.com/2015/02/mongodb-v3-se-shootout-1a.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-8661553023177415380</id>
		<updated>2015-02-05T10:57:40+00:00</updated>
		<content type="html">&lt;span&gt;In &lt;a href=&quot;http://www.acmebenchmarking.com/2015/02/mongodb-storage-engine-shootout-round-1.html&quot; target=&quot;_blank&quot;&gt;round 1&lt;/a&gt; of the MongoDB v3.0 Storage Engine Shootout I noticed that &lt;a href=&quot;http://www.wiredtiger.com/&quot; target=&quot;_blank&quot;&gt;WiredTiger&lt;/a&gt; did something totally unexpected, it performed better with the OpLog enabled than it did with the OpLog disabled. This is peculiar, as enabling the OpLog forces MongoDB to maintain an additional collection of all insert/update/delete operations on the server, plus the collection is capped which is a no simple feat for WiredTiger's B-tree (it's a similarly painful for &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek's&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Fractal_tree_index&quot; target=&quot;_blank&quot;&gt;Fractal Tree&lt;/a&gt;).&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;My benchmark server has 32GB of RAM. Since these first few benchmark rounds are not intended to be in-memory benchmarks I need to make sure the working set of data far exceeds the cache size so I can induce IO. The easiest way to do that on storage engines that support a defined cache size is to use directIO. With directIO the filesystem writes are not cached in the OS buffers, so setting a small cache for the particular storage engine works fine. In my testing I use 8GB as the cache size. Unfortunately the MMAPv1 storage engine uses memory mapped files and doesn't have a specific parameter to limit the amount of memory it uses, it just uses all available memory in your server. I get around this by executing a program prior to my benchmark that exclusively grabs a set amount of memory on the server, leaving just 12GB available to the MMAPv1 engine. My long term plan is to measure the performance loss when using something like &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; and run the servers in containers.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The WiredTiger storage engine in MongoDB v3.0 is highly configurable. A small number of these configuration options have been exposed and are easily set via the command line when starting up the server. Enabling directIO requires passing a specific configuration string that is not exposed as one of these options, specifically &quot;--wiredTigerEngineConfigString direct_io=[data]&quot;.&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;&lt;span&gt;&lt;b&gt;My current advice to everyone is that if you can't set a WiredTiger parameter with a simple defined command line argument, then don't do it. &lt;u&gt;They are hard to set for a reason&lt;/u&gt;, leave the string based arguments alone!&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;I've changed my benchmarking methodology. Going forward I'm booting my server with the &quot;mem=&quot; argument, thus limiting the server to 12GB of total memory. Also, all go-forward benchmarks with WiredTiger will be using bufferedIO. At some point the MongoDB/WiredTiger team will improve the directIO implementation and I'll rerun my tests and share the results.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;So here are the results of the rerun. First up is WiredTiger with the OpLog on and off. Results are now more explainable than before, but still odd. With directIO, WiredTiger was faster with the OpLog on than off. Now the performance is similar with the OpLog enabled and disabled. Again, not exactly what I expected but better than before.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-vNBhpsRRNxY/VNN1NA_wEuI/AAAAAAAAB7M/zI-R_oYnCy8/s1600/iibench-tps-se-shootout-01a-wiredtiger-12-0-all.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-vNBhpsRRNxY/VNN1NA_wEuI/AAAAAAAAB7M/zI-R_oYnCy8/s1600/iibench-tps-se-shootout-01a-wiredtiger-12-0-all.png&quot; height=&quot;480&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;So replacing the prior bufferedIO run we have a new comparison graph showing TokuMXse vs. WiredTiger vs. MMAPv1.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-VYYXN9KNzjI/VNN1cV6K3II/AAAAAAAAB7U/A8uDCLMYTY4/s1600/iibench-tps-se-shootout-01a-all.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-VYYXN9KNzjI/VNN1cV6K3II/AAAAAAAAB7U/A8uDCLMYTY4/s1600/iibench-tps-se-shootout-01a-all.png&quot; height=&quot;480&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Still a convincing victory for TokuMXse. The low points in TokuMXse are above the peak performance of WiredTiger, and MMAPv1 is just a mess (there are 10 second intervals where MMAPv1 inserted less than 100 documents).&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;A &lt;a href=&quot;http://comerford.cc/wordpress/2015/02/04/mongodb-3-0-testing-compression/&quot; target=&quot;_blank&quot;&gt;recent blog on compression size and performance&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/comerford&quot; target=&quot;_blank&quot;&gt;Adam Comerford&lt;/a&gt; of MongoDB has distracted me, so round 2 will commence on Monday and focus on compression.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">MongoDB Storage Engine Shootout : Round 1 : Indexed Insertion</title>
		<link href="http://www.acmebenchmarking.com/2015/02/mongodb-storage-engine-shootout-round-1.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-264051219135946328</id>
		<updated>2015-02-03T15:12:59+00:00</updated>
		<content type="html">&lt;div class=&quot;separator&quot;&gt;&lt;span&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-CgPt9dgZ9LA/VNDVgbvT4sI/AAAAAAAAB50/QcWVFjcVZgk/s1600/storage-engine-wars.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-CgPt9dgZ9LA/VNDVgbvT4sI/AAAAAAAAB50/QcWVFjcVZgk/s1600/storage-engine-wars.png&quot; height=&quot;163&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt;The next release of MongoDB includes the ability to select a storage engine, the goal being that different storage engines will have different capabilities/advantages, and user's can select the one most beneficial to their particular use-case. &lt;i&gt;&lt;b&gt;Storage engines are cool.&lt;/b&gt;&lt;/i&gt; MySQL has offered them for quite a while. One very big difference between the MySQL and MongoDB implementations is that in MySQL the user gets to select a particular storage engine for each table, whereas in MongoDB it's a choice made at server startup. You get a single storage engine for everything on the particular mongod instance. I see pros and cons to each decision, but that's a blog for another day.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;In &lt;a href=&quot;http://www.mongodb.com/blog/post/renaming-our-upcoming-release-mongodb-30&quot;&gt;MongoDB 3.0&lt;/a&gt; (yes it was going to be 2.8 but now it's 3.0, &lt;i&gt;get over it&lt;/i&gt;) the existing storage engine technology, named MMAPv1, is the default but MongoDB will support the &lt;a href=&quot;http://www.mongodb.com/press/wired-tiger&quot;&gt;acquired WiredTiger&lt;/a&gt; storage engine to a limited degree. As I understand it the B-tree implementation is supported, but LSM is not. Eliot has publicly stated that the long term goal is for WiredTiger to be fully supported and the default, and eventually MMAPv1 will be deprecated. The only other currently viable storage engine is &lt;a href=&quot;http://www.tokutek.com/&quot;&gt;Tokutek's&lt;/a&gt; &lt;a href=&quot;http://www.tokutek.com/2015/01/announcing-tokumxse-v1-0-0-rc-0/&quot;&gt;TokuMXse&lt;/a&gt;, which must be obtained directly from Tokutek. The &lt;a href=&quot;https://github.com/facebook/rocksdb&quot;&gt;RocksDB&lt;/a&gt; team at &lt;a href=&quot;http://www.facebook.com/&quot;&gt;Facebook&lt;/a&gt; is also working on a storage engine, but the release date doesn't seem to be any time soon.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;But enough of this overview, this series of blogs is all about picking a benchmark, explaining what it's doing, running it on all storage engines, and selecting a winner for the &quot;round&quot;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;First up is iiBench, the indexed insertion benchmark. It's easy to grab and run the code for yourself via &lt;a href=&quot;https://github.com/tmcallaghan/iibench-mongodb&quot;&gt;GitHub&lt;/a&gt;. The benchmark itself was created to show how well systems perform in a pure insertion workload to a single collection with 3 secondary indexes, all of which are on fields with random insertion patterns.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I ran iiBench with defaults except for the following, all of which can be easily modified via the run.simple.bash script:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;4 concurrent insert threads (WiredTiger and TokuMXse support document level locking so they should have an advantage here)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;250 documents per inserted batch&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;benchmark duration = 60 minutes&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;1 additional character field, 1000 bytes, 75% compressible&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Every 10 second interval the number of completed inserts is reported &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;All benchmarks were run on AcmeBenchmarking server #1 (ab01), I'll be creating a &quot;server details&quot; page soon, but for the time being:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Intel 4790K CPU (quad core + hyperthreading)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;32GB DDR3 RAM&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;LSI 9280 RAID : 512MB cache, Samsung 830 256GB SSD&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Lots of IOPs and bandwidth &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Ubuntu 14.04 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;The goal is to show how the system behave long-term, not just for a short amount of time. The easiest way to do that is to get data &amp;gt; RAM, so...&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;For WiredTiger and TokuMXse I configured cache size to 8GB and forced directIO.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;For MMAPv1 I run an additional process on the server that uses/locks all but 12GB of RAM, so the mongod server doesn't have access to the entire 32GB. I plan on running via docker at some point so I can simply expose less memory to the server, but this technique has served me well so far.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;&amp;nbsp;And lastly, the MongoDB versions:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;mongodb-linux-x86_64-3.0.0-rc7.tgz&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;mongodb-linux-x86_64-tokumxse-20150123e.tgz&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;&lt;span&gt;First benchmark run, OpLog is on.&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-aLNTFWf1y_g/VNDZQy2ynTI/AAAAAAAAB6A/ZJOZmTO2fiE/s1600/iibench-tps-se-shootout-01-all-oplog-on.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-aLNTFWf1y_g/VNDZQy2ynTI/AAAAAAAAB6A/ZJOZmTO2fiE/s1600/iibench-tps-se-shootout-01-all-oplog-on.png&quot; height=&quot;480&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span&gt;A couple of interesting things to note here:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;The WiredTiger B-tree becomes IO bound for secondary index maintenance quickly.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;MMAPv1 comes close to the 0-line 30 minutes in. The 0-line is bad, it means there were no inserts completed in the measured 10 second interval.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;After looking at this graph I wanted to understand the performance impact of the OpLog. For those new to MongoDB the OpLog is where completed operations are logged for replay into secondaries (replication). The OpLog can also be tailed or queried just like any other collection in MongoDB. The OpLog is a capped collection, meaning it's kept at a fixed size, which is hard for B-tree/Fractal Tree backed engined like WiredTiger and TokuMXse to maintain. So here is the rerun of the benchark with the OpLog disabled (off).&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;span&gt;Second benchmark run, OpLog is off.&lt;/span&gt;&lt;/b&gt; &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-ubuAWs8tXg0/VNDeYmaDNaI/AAAAAAAAB6Q/loXS8BXv2dU/s1600/iibench-tps-se-shootout-01-all-oplog-off.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-ubuAWs8tXg0/VNDeYmaDNaI/AAAAAAAAB6Q/loXS8BXv2dU/s1600/iibench-tps-se-shootout-01-all-oplog-off.png&quot; height=&quot;480&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;span&gt;The performance changes are interesting, and worth looking at in isolation of each engine. I've regraphed each result, showing the particular engine with the OpLog on and off, and started the graph at the 1200 second mark to eliminate the early in-memory noise.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;MMAPv1&lt;/b&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;The 0-line issues went away after disabling the OpLog. This is nice to see, but running a server without an OpLog is a really bad idea if you care about your data. With the OpLog enabled it's performance variability is concerning.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-_UtRI9S1A4I/VNDfkG10UoI/AAAAAAAAB6c/xnxGtGMvSDc/s1600/iibench-tps-se-shootout-01-mmapv1.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-_UtRI9S1A4I/VNDfkG10UoI/AAAAAAAAB6c/xnxGtGMvSDc/s1600/iibench-tps-se-shootout-01-mmapv1.png&quot; height=&quot;480&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;TokuMXse&lt;/b&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;As with MMAPv1, performance improved after disabling the OpLog.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-wneYOSNRtvY/VNDhDqgDyOI/AAAAAAAAB64/aLJaSTWeAzc/s1600/iibench-tps-se-shootout-01-tokumxse(1).png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-wneYOSNRtvY/VNDhDqgDyOI/AAAAAAAAB64/aLJaSTWeAzc/s1600/iibench-tps-se-shootout-01-tokumxse(1).png&quot; height=&quot;480&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-0wNEr4NtTOw/VNDfsOPEGHI/AAAAAAAAB6k/b2InpKon2I0/s1600/iibench-tps-se-shootout-01-tokumxse.png&quot;&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;WiredTiger&lt;/b&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;This is a real head-scratcher. Performance peaks were actually higher (almost 2x) with the OpLog enabled, even though the server needs to maintain an additional collection. Ideas?&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-oQxcZu5vczo/VNDfwelfcQI/AAAAAAAAB6s/vi1ZSRs5uQk/s1600/iibench-tps-se-shootout-01-wiredtiger.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-oQxcZu5vczo/VNDfwelfcQI/AAAAAAAAB6s/vi1ZSRs5uQk/s1600/iibench-tps-se-shootout-01-wiredtiger.png&quot; height=&quot;480&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;&lt;span&gt;&lt;span&gt;Round 1 Recap&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Round 1 goes&lt;/span&gt;&lt;span&gt; to TokuMXse, it's performance is substantially higher in both the OpLog enabled and OpLog disabled tests. &lt;i&gt;I'm hoping that someone can explain to me the reason WiredTiger performed better with the OpLog enabled.&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;In Round 2 I'll add queries to the above workload to see how that impacts the insertion performance.&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">So long, and thanks for all the help.</title>
		<link href="http://www.acmebenchmarking.com/2015/01/todo-so-long-and-thanks-for-all-help.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-8756554794176909192</id>
		<updated>2015-01-23T16:01:06+00:00</updated>
		<content type="html">&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-xUqhWzPeRZI/VLe8vRP8GqI/AAAAAAAAB5U/MhWGyiTVIFo/s1600/fish.jpg&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-xUqhWzPeRZI/VLe8vRP8GqI/AAAAAAAAB5U/MhWGyiTVIFo/s1600/fish.jpg&quot; height=&quot;320&quot; width=&quot;213&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Today is my last day at &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek&lt;/a&gt;. On Monday I'm starting a new opportunity as VP/Technology at &lt;a href=&quot;http://www.crunchtime.com/&quot; target=&quot;_blank&quot;&gt;CrunchTime!&lt;/a&gt;. If you are a web developer, database developer, or quality assurance engineer in the Boston area and looking for a new opportunity please contact me or visit the &lt;a href=&quot;http://www.crunchtime.com/about-us/careers/&quot; target=&quot;_blank&quot;&gt;CrunchTime! career page&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I've really enjoyed my time at VoltDB and Tokutek. Working for &lt;a href=&quot;http://en.wikipedia.org/wiki/Michael_Stonebraker&quot;&gt;Mike Stonebraker&lt;/a&gt;&amp;nbsp;(at VoltDB) was on my career &quot;bucket list&quot; and in these past 3.5 years at Tokutek I've experienced the awesomeness of the MySQL ecosystem and the surging NoSQL database market.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;But now I'm ready to going back to consuming databases, not creating them. It's probably a good idea for anyone in technology to work on the other side of the producer/consumer line, nothing beats &quot;real-world&quot; experience.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;If you like what I've been writing here then keep this blog in your RSS reader and/or follow me on twitter using &lt;/span&gt;&lt;a href=&quot;https://twitter.com/tmcallaghan&quot; target=&quot;_blank&quot;&gt;@tmcallaghan&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://twitter.com/acmebench&quot; target=&quot;_blank&quot;&gt;@acmebench&lt;/a&gt;&lt;span&gt;. My goal is to keep blogging twice a month.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;I hope there will be less concern about my benchmarking objectivity, as I'll no longer have a stake in the benchmarked technologies.&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Here are some topics I've already started working on:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Creating a brand new benchmark that has more &quot;real world&quot; appeal than existing ones. I've stared work on an &quot;email server&quot; workload with operations like send, read, label, search, forward, reply, etc. MongoDB has &lt;a href=&quot;http://www.mongodb.com/presentations/mythbusting-understanding-how-we-measure-performance-mongodb-0&quot; target=&quot;_blank&quot;&gt;hinted&lt;/a&gt; that they are creating an &quot;inbox fan in/out&quot; benchmark which might be similar (I wish they'd make it public), mine will be available on &lt;a href=&quot;https://github.com/tmcallaghan&quot; target=&quot;_blank&quot;&gt;my GitHub&lt;/a&gt; and will likely support multiple database technologies.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;A lot of MongoDB 2.8 benchmarks comparing the MMAPV1, &lt;a href=&quot;http://www.wiredtiger.com/&quot; target=&quot;_blank&quot;&gt;WiredTiger&lt;/a&gt;, and &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;TokuMXse&lt;/a&gt; Storage Engines as well as &lt;a href=&quot;http://www.tokutek.com/tokumx-for-mongodb/&quot; target=&quot;_blank&quot;&gt;TokuMX&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;http://www.mysql.com/&quot; target=&quot;_blank&quot;&gt;MySQL&lt;/a&gt; benchmarks including TokuDB plus the 5.7 enhancements.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Analysis of good and bad benchmarks that I've seen. Please email me or comment on this blog if you've found an interesting new benchmark that could use review.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;And, of course, blogs about the practice of benchmarking itself.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Lastly, I'd like to give a shout out to many people and companies I've worked with over the past 6+ years. You've all been welcoming and supportive, and really made my job fun. Specifically,&lt;/span&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;My &lt;a href=&quot;http://www.dbms2.com/2010/05/25/voltdb-finally-launches/&quot; target=&quot;_blank&quot;&gt;&quot;greater-known but nonethemore smart&quot;&lt;/a&gt; brother, &lt;a href=&quot;http://smalldatum.blogspot.com/&quot; target=&quot;_blank&quot;&gt;Mark Callaghan&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;My amazing team at &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek&lt;/a&gt;, a true bunch of wall-breakers.&amp;nbsp;I'll miss Rich, Zardosht, Leif, John, Christian, Joel, Joe, and Abdelhak.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/gnarvaja&quot; target=&quot;_blank&quot;&gt;Gerry&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://www.linkedin.com/in/sheeri&quot; target=&quot;_blank&quot;&gt;Sheeri&lt;/a&gt;&lt;span&gt; for letting me sing the jingle on the &lt;/span&gt;&lt;a href=&quot;http://www.oursql.com/&quot; target=&quot;_blank&quot;&gt;OurSQL Podcast&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;The entire MySQL ecosystem.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;http://www.percona.com/about-us/our-team/vadim-tkachenko&quot;&gt;Vadim&lt;/a&gt;, &lt;a href=&quot;http://www.percona.com/about-us/our-team/peter-zaitsev&quot;&gt;Peter&lt;/a&gt;, and &lt;a href=&quot;https://www.linkedin.com/in/jrobyoung&quot;&gt;Rob&lt;/a&gt; at Percona,&amp;nbsp;&lt;a href=&quot;https://www.linkedin.com/in/amrith&quot; target=&quot;_blank&quot;&gt;Amrith&lt;/a&gt; at &lt;a href=&quot;http://tesora.com/&quot; target=&quot;_blank&quot;&gt;Tesora&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/pub/robert-hodges/3/568/a64&quot; target=&quot;_blank&quot;&gt;Robert&lt;/a&gt; at &lt;a href=&quot;http://continuent.com/&quot; target=&quot;_blank&quot;&gt;Continuent&lt;/a&gt; [now VMware], &lt;a href=&quot;https://www.linkedin.com/in/xaprb&quot; target=&quot;_blank&quot;&gt;Baron&lt;/a&gt; at &lt;a href=&quot;http://www.vividcortex.com/&quot; target=&quot;_blank&quot;&gt;VividCortex&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/shlominoach&quot;&gt;Shlomi&lt;/a&gt; at &lt;a href=&quot;http://www.booking.com/&quot;&gt;Booking.com&lt;/a&gt;, and &lt;a href=&quot;https://www.linkedin.com/pub/henrik-ingo/3/232/8a7&quot;&gt;Henrik&lt;/a&gt; at &lt;a href=&quot;http://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Too many to people to name from&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.percona.com/&quot; target=&quot;_blank&quot;&gt;Percona&lt;/a&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.mysql.com/&quot; target=&quot;_blank&quot;&gt;Oracle/MySQL&lt;/a&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://dbhangops.github.io/&quot; target=&quot;_blank&quot;&gt;DbHangOps&lt;/a&gt;&lt;span&gt;, &amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://voltdb.com/&quot; target=&quot;_blank&quot;&gt;VoltDB&lt;/a&gt;&lt;span&gt;, and&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://mariadb.com/&quot; target=&quot;_blank&quot;&gt;MariaDB&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;And lastly thanks to everyone who has attended one of my webinars or presentations, commented on my blogs, or used TokuDB/TokuMX (commercially or community).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;My personal email address is available by clicking the disclaimer widget on the right hand side of the screen.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;So long... and stay tuned.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Should vegetarians open steakhouse restaurants?</title>
		<link href="http://www.acmebenchmarking.com/2015/01/should-vegetarians-open-steakhouse.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-2951329559818018446</id>
		<updated>2015-01-08T10:39:40+00:00</updated>
		<content type="html">&lt;i&gt;&lt;span&gt;&quot;Should vegetarians open steakhouse restaurants?&quot;&lt;/span&gt;&lt;/i&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Though someone will probably give me several examples of why they should, I'll argue that they absolutely should not. How can someone who doesn't eat steak convince others to eat at their &quot;steak-only&quot; restaurant?&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;But this is something a &quot;professional technology benchmarker&quot; (PTB) struggles with on a regular basis. Hello, I'm Tim Callaghan, and I'm a PTB.&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;b&gt;professional technology benchmarker&lt;/b&gt;, or PTB (noun) : One who compares two technologies as part of their job. One of these technologies is usually the product of the PTB's employer, the other is almost always not.&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;In a past experience I was tasked with comparing the performance of a fully in-memory database with Oracle and MySQL on a &quot;TPC-C like&quot; workload. At the time I was an Oracle expert and working for the in-memory database company, but had never started a single MySQL server in my life. At Tokutek I've run numerous comparisons of TokuDB and TokuMX against InnoDB and MongoDB. In fact it's a large part of my job, and something I really enjoy.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;In benchmarking competing technologies I &lt;b&gt;&lt;u&gt;always&lt;/u&gt;&lt;/b&gt; follow the same exact process:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;Decide which competitive advantage to showcase (keep it simple).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Build the benchmark (borrow from existing apps).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Execute the benchmark (record everything).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Publish and explain the results (blog and encourage feedback).&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;span&gt;Step 3 is where I'm always overly cautious. Here's a punch list of rules I follow:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;To the best extent possible, make sure that the benchmark environment is fair to everyone.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Nothing invalidates results faster than a misconfigured system.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Capture all details about the environment and publish them in your results.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Hardware, operating system, configuration parameters.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Get advice from the experts on any technology you aren't an expert in.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Minimally, show them the results of your benchmark and ask for feedback prior to publishing.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;In my opinion, this last bullet is the most important one. When I first started at Tokutek I was asked to improve the benchmarking. Tokutek's only product at the time was TokuDB, a MySQL storage engine competing with InnoDB. There were several resources at Tokutek to help me configure TokuDB, but InnoDB was another story. I needed to configure a few brand new servers and get benchmarking immediately.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Did I tear open the server boxes and run benchmarks? Nope. Rather, I called &lt;a href=&quot;http://smalldatum.blogspot.com/&quot; target=&quot;_blank&quot;&gt;my brother&lt;/a&gt;. He told me to reach out to &lt;a href=&quot;https://twitter.com/datacharmer&quot; target=&quot;_blank&quot;&gt;Giuseppe Maxia&lt;/a&gt; (&lt;a href=&quot;http://datacharmer.blogspot.com/&quot; target=&quot;_blank&quot;&gt;The Data Charmer&lt;/a&gt;) about optimally configuring CentOS servers and &lt;a href=&quot;https://twitter.com/vadimtk&quot; target=&quot;_blank&quot;&gt;Vadim Tkachenko&lt;/a&gt; (&lt;a href=&quot;http://www.percona.com/blog/author/vadim/&quot; target=&quot;_blank&quot;&gt;MySQL Performance Expert&lt;/a&gt;) about configuring InnoDB for performance.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Prior to reaching out to Giuseppe and Vadim, I did my homework by reading as much of their web based content as possible. I then sent them emails asking for assistance, and was amazed at how much they were willing to help. That was over 3 years ago and they are still helpful whenever I have a question.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;So where am I going with this?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;I recently wrote a &lt;a href=&quot;http://www.acmebenchmarking.com/2015/01/can-we-improve-current-state-of.html&quot; target=&quot;_blank&quot;&gt;blog&lt;/a&gt;&amp;nbsp;titled &quot;Can we improve the current state of benchmarking?&quot;. In it I proposed ways to improve the process of technology benchmarking, primarily peer review. I discussed a mistake in the implementation of the &lt;a href=&quot;http://stssoft.com/&quot; target=&quot;_blank&quot;&gt;STSsoft&lt;/a&gt; &lt;a href=&quot;http://stssoft.com/products/stsdb-4-0/benchmark/&quot; target=&quot;_blank&quot;&gt;Database Benchmark&lt;/a&gt;, specifically how it was incorrectly checking size for TokuDB. The benchmark code was checking uncompressed size, not compressed. A simple error, and one that could have easily been reviewed and discussed prior to the putting marketing claims around compression on their website.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Equally concerning to me in the &lt;a href=&quot;http://stssoft.com/products/stsdb-4-0/benchmark/#tests-on-hdd-drives&quot; target=&quot;_blank&quot;&gt;benchmark results&lt;/a&gt; was the insertion performance of TokuDB. The &lt;a href=&quot;http://stssoft.com/products/stsdb-4-0/&quot; target=&quot;_blank&quot;&gt;STSdb product page&lt;/a&gt; claims a &quot;10x performance improvement&quot; over Fractal Trees. Even though the particular benchmark workload was a random insertion pattern, the TokuDB &quot;REPLACE INTO&quot; optimization should have handled it with ease. Granted, the hardware for the test was not ideal as an Intel Celeron processor and single 500G 7.2K SATA hard drive.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;So I dug in and read the benchmark code some more...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;In their performance chart it shows STSdb 4.0 inserting at a very high rate of speed, the exit throughput looks to be just above 50000 inserts per second. The TokuDB insert performance is horribly low, it's hard to read on the graph but I'd estimate it to be around 1500 inserts per second.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;In reading the benchmark code I found the bottleneck for TokuDB's performance was the IO performance. In my test a single SATA drive showed nearly 100% IO utilization. By default, TokuDB runs fully durable meaning that every commit is followed by an fsync() operation. I'm not sure what the STSdb durability guarantee is (I'm the vegetarian in their steakhouse), but given that their documentation states that ACID is on the road-map I find it hard to believe they are performing fsync() for each commit, nor do I understand what an STSdb commit even is. I'm confident that a consumer grade SATA drive isn't going to perform more than ~100 IOPs.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;So I ran two tests. One was to shutoff fsync-on-commit behavior in TokuDB. And the benchmark ran much faster. But I like the D in ACID, so I modified the benchmark application to perform 10000 inserts per batch instead of 1000, which reduces the number of fsync() operations by 90%. The results are dramatic.&lt;/span&gt;&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;Note that I'm running on TokuDB v7.5.3 for MySQL 5.5.40, stock defaults (no TokuDB variables defined in my.cnf other than a 256M cache and directIO), on an Ubuntu 14.04 desktop with a Core i7-4790K, 32GB RAM, and an Intel 480GB SSD. The benchmark client is running in a Windows 7 Virtual Machine (VMware Workstation 11.0) on the Ubuntu desktop.&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span&gt;Insert performance, 100 million rows, random keys, &lt;b&gt;1000&lt;/b&gt; inserts per batch.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-JwTRrOAWxpA/VK6NxRSfQII/AAAAAAAAB4U/Ey6XAx7_jAw/s1600/1000-per-batch.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-JwTRrOAWxpA/VK6NxRSfQII/AAAAAAAAB4U/Ey6XAx7_jAw/s1600/1000-per-batch.png&quot; height=&quot;166&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Insert performance, 100 million rows, random keys, &lt;b&gt;10000&lt;/b&gt; inserts per batch.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-SZAVqIOyIVU/VK6N4KDfdWI/AAAAAAAAB4c/WqwkWjbbWKE/s1600/10000-per-batch.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-SZAVqIOyIVU/VK6N4KDfdWI/AAAAAAAAB4c/WqwkWjbbWKE/s1600/10000-per-batch.png&quot; height=&quot;166&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Increasing the batch size from 1000 to 10000 improved TokuDB insert throughput over 3x. This is largely explained by the fact that a single SATA disk offers low IOPs, so the fsync operations were gating performance with smaller batches. Disabling fsync-on-commit makes it run even faster.&lt;/span&gt;&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;&lt;b&gt;Note&lt;/b&gt;: I can't explain why my insert performance was far higher than theirs, as I only changed the stock TokuDB configuration to be a 256M cache and directIO (to make sure this isn't an in-memory test). I'd guess it's their CPU and hard drive, but I'm not sure. And yes, I'd be happy to help figure it out.&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span&gt;So I'm back to where I started. How can &lt;b&gt;&lt;i&gt;&lt;u&gt;I&lt;/u&gt;&lt;/i&gt;&lt;/b&gt; improve things? I'm not an expert in every competing technology I benchmark against. Yet a&lt;/span&gt;&lt;span&gt;s a professional technical benchmarker I want people to trust my results.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;For now I can only wait for others to question my results, configurations, and benchmark applications. While I'm waiting I'll continue questioning the results of my peers.&amp;nbsp;&lt;/span&gt;&lt;span&gt;And it doesn't have to be all doom-and-gloom. I'll also be pointing out when I find a great benchmark, or benchmarker, or benchmarketer.&lt;/span&gt;&lt;/div&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Can we improve the current state of benchmarketing?</title>
		<link href="http://www.acmebenchmarking.com/2015/01/can-we-improve-current-state-of.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-3928315741521739040</id>
		<updated>2015-01-06T11:28:15+00:00</updated>
		<content type="html">&lt;span&gt;I'm starting off 2015 with the following New Year's Resolution, to improve the state of benchmarking.&amp;nbsp;&lt;/span&gt;&lt;span&gt;About a month ago I noticed the following &lt;/span&gt;&lt;a href=&quot;https://twitter.com/iamic/status/541908179982884864&quot; target=&quot;_blank&quot;&gt;tweet&lt;/a&gt;&lt;span&gt;:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;Hey &lt;b&gt;@tokutek&lt;/b&gt;, please look at this: &lt;a href=&quot;http://stssoft.com/products/stsdb-4-0/benchmark&quot;&gt;http://stssoft.com/products/stsdb-4-0/benchmark&lt;/a&gt; …. Are the benchmarks rigged or correctly done? I'm curious to know!&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;While I've never met Ian Campbell (&lt;a href=&quot;https://twitter.com/iamic&quot; target=&quot;_blank&quot;&gt;@iamic&lt;/a&gt;) he certainly knew how to call me to action. I immediately checked out the &lt;a href=&quot;http://stssoft.com/&quot; target=&quot;_blank&quot;&gt;STSsoft website&lt;/a&gt;, the &lt;a href=&quot;http://stssoft.com/products/stsdb-4-0/benchmark/&quot; target=&quot;_blank&quot;&gt;benchmark results page&lt;/a&gt;, and the &lt;a href=&quot;http://stssoft.com/products/database-benchmark/&quot; target=&quot;_blank&quot;&gt;benchmark code itself&lt;/a&gt;. My first reaction was that something had to be wrong, as the benchmark results showed TokuDB and MyISAM requiring the same amount of disk space. FYI, MyISAM does not compress at all unless it's in a &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/myisam-storage-engine.html#idm140705558016896&quot; target=&quot;_blank&quot;&gt;compressed read-only mode&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Needless to say it was time to figure out what was really going on with this benchmark. As was the case with the &lt;a href=&quot;http://www.acmebenchmarking.com/2014/10/dissecting-enterprisedb-nosql-benchmark.html&quot; target=&quot;_blank&quot;&gt;EnterpriseDB NoSQL Benchmark&lt;/a&gt; that I reviewed back in October, I decided to dig in, review the &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=benchmarketing&quot; target=&quot;_blank&quot;&gt;benchmarketing&lt;/a&gt;, and dissect the benchmark itself.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;Step 1: Benchmarketing Review&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;To keep my process bounded, I decided to only review the compression claims as stated on&amp;nbsp;the &lt;a href=&quot;http://stssoft.com/products/stsdb-4-0/&quot; target=&quot;_blank&quot;&gt;STSdb v4.0 product page&lt;/a&gt;. &lt;i&gt;The page also makes serious performance claims versus Fractal Tree indexing technology that I'll likely test and blog in the future.&lt;/i&gt; The page clearly states:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&quot;&lt;b&gt;Up to 3x&lt;/b&gt; more compact than TokuDB.&quot;&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;Underneath the claim is a link to the &lt;a href=&quot;http://stssoft.com/products/stsdb-4-0/benchmark/&quot; target=&quot;_blank&quot;&gt;benchmark results page&lt;/a&gt;. In the size chart at the bottom of that page it shows STSdb 4.0 at 5365 MB, MyISAM at 7051 MB, and TokuDB at 7051 MB. So I was left wondering...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;On what planet is 5365 3x smaller than 7051?&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;For the claim to be true the STSdb size would need to be 2350 MB.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Why is the MyISAM size exactly the same as the TokuDB size?&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;The answer to the second question causes a serious benchmarketing issue for the vendor. The SQL that the benchmark uses to determine size was generic for both MyISAM and TokuDB. In the TokuDB case it is calculating uncompressed size, which explains why it was the same as MyISAM. This could also have been checked by looking at the size of the files on disk.&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;i&gt;At the bottom of this blog I've included the benchmark code change required to properly determine the size for TokuDB.&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;Step 2: Run the benchmark (including the fix)&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Here are my results for MyISAM and TokuDB. I'm including MyISAM results to show that I'm running the benchmark properly (comparing to the posted results).&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;Note that I'm running on TokuDB v7.5.3 for MySQL 5.5.40, stock defaults (no TokuDB variables defined in my.cnf), on an Ubuntu 14.04 desktop with a Core i7-4790K, 32GB RAM, and an Intel 480GB SSD. The benchmark client is running in a Windows 7 Virtual Machine (VMware Workstation 11.0) on the Ubuntu desktop.&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-8cgg-Yj3alc/VKvmiywVKSI/AAAAAAAAB34/K4JntIEZ48I/s1600/100mm-myisam.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-8cgg-Yj3alc/VKvmiywVKSI/AAAAAAAAB34/K4JntIEZ48I/s1600/100mm-myisam.png&quot; height=&quot;363&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-C5T5_W0K28Y/VKvmo1Zgo8I/AAAAAAAAB4A/B9S4WOdutmk/s1600/100mm-tokudb-zlib.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-C5T5_W0K28Y/VKvmo1Zgo8I/AAAAAAAAB4A/B9S4WOdutmk/s1600/100mm-tokudb-zlib.png&quot; height=&quot;364&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Step 3: Analyze the results&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;span&gt;TokuDB is &lt;b&gt;18% smaller&lt;/b&gt; than STSdb (4413 MB vs. 5365 MB).&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;Where do we go from here?&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;span&gt;Can we do better than this? I think we can. I propose the following:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Do everything possible to make sure you publish accurate results.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;If something looks too good to be true, it probably is.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Review the benchmark efforts of others.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Even if it's not comparing to your technology, peer review is needed.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Challenge incorrect results.&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;I welcome others to review my benchmarks and my results as it only makes the benchmark more trustworthy.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The correct SQL to determine TokuDB size:&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;br /&gt;&lt;span&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; string tables = String.Join(&quot; OR &quot;, Enumerable.Range(0, connections.Length).Select(x =&amp;gt; String.Format(&quot;table_name = '{0}'&quot;, GetTableName(x))));&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; string query = &quot;&quot;;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; if (StorageEngine == MySQLStorageEngine.TokuDB)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; query = String.Format(&quot;select sum(bt_size_allocated) from information_schema.TokuDB_fractal_tree_info where table_schema='{0}' and ({1});&quot;, conn.Database, tables);&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; else&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; query = String.Format(&quot;SELECT SUM(Data_length + Index_length) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '{0}' and ({1});&quot;, conn.Database, tables);&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; IDataReader reader = conn.ExecuteQuery(query);&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; long size = 0;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; if (reader.Read())&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; size = reader.GetInt64(0);&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; reader.Close();&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp; return size;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;}&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Benchmarking MongoDB 2.8 MMAPV1 Collection Level Locking</title>
		<link href="http://www.acmebenchmarking.com/2014/12/benchmarking-mongodb-28-mmapv1.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-2088055100193322102</id>
		<updated>2014-12-15T12:25:07+00:00</updated>
		<content type="html">&lt;span&gt;While MongoDB 2.8 introduces a formal &lt;a href=&quot;http://docs.mongodb.org/manual/release-notes/2.8/#storage-engines-improved-concurrency-document-level-locking-with-compression&quot; target=&quot;_blank&quot;&gt;storage engine&lt;/a&gt; API and brings with it the new &lt;a href=&quot;http://www.wiredtiger.com/&quot; target=&quot;_blank&quot;&gt;WiredTiger&lt;/a&gt; storage engine, it also adds collection level locking to the existing memory mapped engine (MMAPV1) which will remain the default engine until MongoDB 3.0, &lt;a href=&quot;http://www.zdnet.com/article/mongodb-cto-how-our-new-wiredtiger-storage-engine-will-earn-its-stripes/&quot; target=&quot;_blank&quot;&gt;so says Eliot&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The MongoDB community has been waiting a long time for collection level locking, the &lt;a href=&quot;https://jira.mongodb.org/browse/SERVER-1240&quot; target=&quot;_blank&quot;&gt;Jira ticket&lt;/a&gt; was created on June 15, 2010. When I saw the following Facebook post I got excited to give it a spin, but unfortunately the results were extremely poor using MongoDB 2.7.8 (I assume there were other bottlenecks that hadn't yet been removed, and understand that testing early software can be hit-or-miss).&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-1NVbbS9XpUc/VI7of1yw8GI/AAAAAAAAB3A/9mYWJ2X18Nc/s1600/mongodb-cll.png&quot;&gt;&lt;span&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-1NVbbS9XpUc/VI7of1yw8GI/AAAAAAAAB3A/9mYWJ2X18Nc/s1600/mongodb-cll.png&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Don't get me wrong, I'm a big fireworks fan. With this sort of announcement I expected to see some sort of measurement validating the improvements of going from database level locking to a collection level locking. I've been unable to see any benchmark results, so I decided to run my standard set of 5 benchmarks to compare the MMAPV1 technology in MongoDB 2.6.5 versus MongoDB 2.8.0.RC2 to see how much improvement the lock refinement has made.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Rather than go into the technical details of locks I'll assume that a user's expectation of lock refinement is as follows:&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&lt;i&gt;With database level locking I can only write into a single collection at a time within a single database, regardless of the number of clients. With collection level locking I'll achieve additional throughput (insert/update/delete) by concurrently operating on multiple collections.&lt;/i&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;With most technologies the performance improvement with concurrent clients generally scales through a particular number of them, levels off at some point, then often times gets worse with additional client load.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Having said all of that, here are my results. In future blogs I'll be drilling deeper into specifics, but for now thought the results were interesting enough to share as is. All benchmark code is available in my GitHub: &lt;a href=&quot;https://github.com/tmcallaghan/iibench-mongodb&quot; target=&quot;_blank&quot;&gt;iibench&lt;/a&gt;, &lt;a href=&quot;https://github.com/tmcallaghan/sysbench-mongodb&quot; target=&quot;_blank&quot;&gt;sysbench&lt;/a&gt;. The benchmarks were run on a dual socket Xeon 5520 (8 hardware threads plus hyperthreading), 8 drive 10K SAS RAID10 array, 48GB RAM.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;Benchmark 1 : iiBench : 1 insert thread&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This benchmark measures the sequential insertion performance into a single collection with 3 secondary indexes using a single insert client.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;2.6.5 = 3190 inserts per second&lt;/span&gt;&lt;br /&gt;&lt;span&gt;2.8.0.RC2 = 3414 inserts per second (7% faster)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Since this test is single threaded I didn't expect to see any performance improvement. Having said that, measurable performance increases are always nice.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Benchmark 2 : iiBench : 4 insert threads&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This benchmark measures the sequential insertion performance into a single collection with 3 secondary indexes using four concurrent insert clients.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;2.6.5 = 3177 inserts per second&lt;/span&gt;&lt;br /&gt;&lt;span&gt;2.8.0.RC2 = 3233 inserts per second (2% faster)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This test uses 4 insert threads, but all of them are inserting into the same collection so collection level locking provides no benefit.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Benchmark 3 : iiBench : 1 insert threads plus 1 query thread&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This benchmark measures the sequential insertion performance into a single collection with 3 secondary indexes using a single insert client while simultaneously querying the collection via a second client.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;2.6.5 = 2700 inserts per second&lt;/span&gt;&lt;br /&gt;&lt;span&gt;2.8.0.RC2 = 3317 inserts per second (23% faster)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Nothing about collection level locking should have made this benchmark faster, but I measured a 23% improvement. Good stuff.&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Benchmark 4 : Sysbench : Greater than RAM&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Sysbench is an interesting workload as it tests point queries, range queries, aggregation, inserts, updates, and deletes. This test was run with 16 collections so the opportunity for parallelism enabled by collection level locking was certainly present.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;First the 16 collections are loaded with data (insert only), with 8 concurrent loader threads each loading it's own collection. This experiment loads each collection with 10 million documents, so the amount of data exceeds the available RAM in the server (and requires IO).&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Load phase (journal on, oplog off):&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;2.6.5 = 8539 inserts per second&lt;/span&gt;&lt;br /&gt;&lt;span&gt;2.8.0.RC2 = 13954 inserts per second (63% faster)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I'd usually report a 63% improvement as fantastic, but with 8 concurrent loaders the opportunity for improvement was significantly higher. &lt;b&gt;&lt;i&gt;This was the test that should have shown the most dramatic performance improvement.&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Execute phase (journal on, oplog on):&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-MWS-SIeOEnE/VI75Z3R7PDI/AAAAAAAAB3Q/RjwHnnQqHwM/s1600/sysbench-gt-ram.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-MWS-SIeOEnE/VI75Z3R7PDI/AAAAAAAAB3Q/RjwHnnQqHwM/s1600/sysbench-gt-ram.png&quot; height=&quot;355&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;span&gt;The largest gain was at 64 client threads, where performance improved 136%. Nice improvement, but I expected more.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Benchmark 5 : Sysbench : In-Memory&lt;/b&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Again, the same Sysbench workload and schema but only 1 million documents per collection so the entire workload easily fits in RAM.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Load phase (journal on, oplog off):&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;2.6.5 = 27347 inserts per second&lt;/span&gt;&lt;br /&gt;&lt;span&gt;2.8.0.RC2 = 43045 inserts per second (72% faster)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Again, I'd usually report a 72% improvement as fantastic, but with 8 concurrent loaders the opportunity for improvement was significantly higher.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Execute phase (journal on, oplog on):&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-nALt_oTjJcc/VI77Yh--B3I/AAAAAAAAB3c/Yh-pl36yoMw/s1600/sysbench-in-ram.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-nALt_oTjJcc/VI77Yh--B3I/AAAAAAAAB3c/Yh-pl36yoMw/s1600/sysbench-in-ram.png&quot; height=&quot;353&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;span&gt;The largest gain this time was at 1024 client threads, where performance improved 118%. As with the greater than RAM Sysbench, nice improvement, but I expected more.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;While there are some measurable performance improvements in the collection level locking feature in MongoDB 2.8, I wonder how much additional time and effort will go into further improving the performance. Given that document level locking is a feature not coming to the MMAPV1 storage engine at all, I assume there won't be much effort into further performance improvements. Please comment with your own tests, I'd like to understand workloads that provide more benefit from this effort.&lt;/span&gt;&lt;/div&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Announcing iiBench for MySQL in Java</title>
		<link href="http://www.acmebenchmarking.com/2014/11/announcing-iibench-for-mysql-in-java.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-231576033373297200</id>
		<updated>2014-11-24T11:31:11+00:00</updated>
		<content type="html">&lt;span&gt;I just pushed the new Java based iiBench for MySQL (and Percona Server and MariaDB), the code and documentation are available now in the &lt;a href=&quot;https://github.com/tmcallaghan/iibench-mysql&quot; target=&quot;_blank&quot;&gt;iibench-mysql Github repo&lt;/a&gt;. Pull request are welcome!&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The &lt;a href=&quot;http://www.tokutek.com/resources/technology/iibench/&quot; target=&quot;_blank&quot;&gt;history of iiBench&lt;/a&gt; goes back to the early days of &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek&lt;/a&gt;. Since &quot;indexed insertion&quot; is a strength of &lt;a href=&quot;http://en.wikipedia.org/wiki/Fractal_tree_index&quot; target=&quot;_blank&quot;&gt;Fractal Tree indexes&lt;/a&gt;, the first iiBench was created by Tokutek in C++ back in 2008. &lt;a href=&quot;http://smalldatum.blogspot.com/&quot; target=&quot;_blank&quot;&gt;Mark Callaghan&lt;/a&gt; rewrote iiBench in Python, adding several features along the way. His version of iiBench is available in &lt;a href=&quot;https://code.launchpad.net/~mdcallag/mysql-patch/mytools&quot; target=&quot;_blank&quot;&gt;Launchpad&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;So why did I create a new iiBench in Java?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Raw Speed&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;By &lt;b&gt;&lt;i&gt;eliminating the insert calls&lt;/i&gt;&lt;/b&gt; from each version I tested how many inserts per second each version. Any time spent waiting for the next batch of inserts is time that could be put toward inserting rows (and yes I understand that concurrent clients can reduce this concern).&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;All tests were run on my desktop (Intel i7-4790K). As the below graph shows, the 1 thread version of the Java iiBench is almost 4x faster than the 4 threaded Python iiBench, and the 4 thread Java version scales quite nicely.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-jGHWnU9Clmw/VHNPMlISYqI/AAAAAAAAB2g/qifnHqTxggw/s1600/20141124-iibench-raw-inserts-per-second.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-jGHWnU9Clmw/VHNPMlISYqI/AAAAAAAAB2g/qifnHqTxggw/s1600/20141124-iibench-raw-inserts-per-second.png&quot; height=&quot;400&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Capability&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Because of the Python's &lt;a href=&quot;https://wiki.python.org/moin/GlobalInterpreterLock&quot; target=&quot;_blank&quot;&gt;Global Interpreter Lock&lt;/a&gt;, I need to run 4 copies of the Python iiBench to create 4 loader &quot;threads&quot;. Each of these benchmark clients creates it's own log files that need to be aggregated to show cumulative insertion performance. Java threading handles it cleanly, allowing a single client application to run regardless of how many client threads are needed.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Miscellaneous&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Not really relevant to the version or language, but I cringe every time I need to get software from Launchpad. I am not a fan of &lt;a href=&quot;http://bazaar.canonical.com/en/&quot; target=&quot;_blank&quot;&gt;Bazaar&lt;/a&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;Again, contributions/comments/complaints are always welcome, here or in github!&lt;/span&gt;&lt;/div&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Prediction: MongoDB 2.8 storage engines and the rise of the MongoDBA</title>
		<link href="http://www.acmebenchmarking.com/2014/11/prediction-mongodb-28-storage-engines.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-4499484215299547934</id>
		<updated>2014-11-17T11:55:29+00:00</updated>
		<content type="html">&lt;span&gt;MongoDB has always been about ease of use. With nothing more than the mongod binary, starting a MongoDB server is as simple as:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;./mongod --dbpath=/path/to/data&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;As a long time user of Oracle and MySQL I'm extremely impressed by just how simple this is. It certainly encourages new users to try it out.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;In MongoDB 2.6 and earlier there has only been a single &quot;storage engine&quot; available in the server. That storage engine has very few tunable parameters, so the defaults are fine for most users. If you don't like the defaults you can probably change them with a little review of the documentation.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;MongoDB 2.8 adds the ability to support an unlimited number of storage engines via a storage engine API. Using the alternative &lt;a href=&quot;http://www.wiredtiger.com/&quot; target=&quot;_blank&quot;&gt;WiredTiger&lt;/a&gt; storage engine is as simple as asking for it on the command line:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;./mongod --dbpath=/path/to/data --storageEngine wiredtiger&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;Simple, right? It is if the defaults work for your use-case and infrastructure. If not, the &lt;a href=&quot;http://docs.mongodb.org/manual/release-notes/2.8/?_ga=1.161065725.190157924.1335295563&quot; target=&quot;_blank&quot;&gt;MongoDB 2.8 release notes&lt;/a&gt; point you to the &lt;a href=&quot;http://source.wiredtiger.com/2.4.1/group__wt.html#ga9e6adae3fc6964ef837a62795c7840ed&quot; target=&quot;_blank&quot;&gt;WiredTiger configuration documentation&lt;/a&gt;. My guess is that most MongoDB users who visit that page will immediately Google for help or advice (look for yourself, there are a lot of complicated parameters, many of which need to be tuned in combination). I assume that MongoDB will reduce the parameters and provide more helpful documentation in the future, but that's an interesting challenge to solve.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;So back to my prediction. MongoDB's simplicity will [no, must] change over time. Picking the correct storage engine is only the first step. It must then be tuned according to the workload and hardware. Indexing and queries continue to grow in complexity, as does the MongoDB optimizer. There have even been hints of schema enforcement in past presentations. Sounds a lot like a DBA to me, a MongoDBA.&lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Dissecting the EnterpriseDB NoSQL Benchmark</title>
		<link href="http://www.acmebenchmarking.com/2014/10/dissecting-enterprisedb-nosql-benchmark.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-6434210369616321023</id>
		<updated>2014-10-27T09:45:58+00:00</updated>
		<content type="html">&lt;span&gt;In my last &lt;a href=&quot;http://www.acmebenchmarking.com/2014/10/tokumx-vs-postgresql-in-enterprisedbs.html&quot; target=&quot;_blank&quot;&gt;blog&lt;/a&gt; I analyzed the compression portion of the&amp;nbsp;&lt;a href=&quot;http://blogs.enterprisedb.com/2014/09/24/postgres-outperforms-mongodb-and-ushers-in-new-developer-reality/&quot; target=&quot;_blank&quot;&gt;EnterpriseDB NoSQL Benchmark&lt;/a&gt;. I concluded that the data set was far too easily compressed. This, in my opinion, invalidates any conclusions originally published comparisons attempt to portray.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;In this blog I want to describe each section of the original benchmark. My goal is not to rerun and compare results with Postgres, MongoDB, or TokuMX. Rather, I want to point out exactly what each individual benchmark is doing and what could have been done differently or better.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Before I begin I want to point out that in no way does this specific benchmark disqualify Postgres as a potential NoSQL solution. Also, EnterpriseDB benchmarked both products with stock default configurations. I'm not sure why &lt;u&gt;not following&lt;/u&gt; the most basic &quot;best practices&quot; is a good idea. An example of this is &lt;a href=&quot;http://docs.mongodb.org/manual/administration/production-notes/#recommended-configuration&quot; target=&quot;_blank&quot;&gt;turning down the readahead&lt;/a&gt; for MongoDB.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Benchmark - Prepare&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;For a given number of documents to insert, a two large flat files are created:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;File 1 is pure JSON, in &quot;batches&quot; of 11 base documents, within which a small percentage of the document is variable and the rest is fixed. This file is appropriate for bulk loading. It is important to note that the &quot;description&quot; field of each document is several kilobytes in length and unchanged in each batch. Bottom line, these documents are highly compressible.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;File 2 is a single document insert statement appropriate to the destination platform (Postgres or MongoDB). While the format is different than file 1, the content of the rows is much the same and highly compressible. Note that neither Postgres nor MongoDB is generating extended inserts, just a single insert per statement.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;Benchmark - Data Load&lt;/b&gt;&lt;br /&gt;&lt;span&gt;The data load benchmark is simply timing the process of bulk loading file 1 from the prepare phase. No indexes exist prior to loading, so this is a primary key only test. And since it's bulk loading a single file with a single loader, there is no concurrency for this test.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Benchmark - Index???&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;You won't find this benchmark result listed because for some reason the &quot;create index&quot; step after bulk loading isn't timed. I'm not going to run this test myself to see which product won, but it seems crazy to me that this step wasn't timed. I'd like to understand this oversight, but the comment capability on the EnterpriseDB blog is now disabled. In any event, 3 indexes are created each on a different field: name, type, and brand.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Benchmark - Select&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;I believe that a query workload should be part of any new benchmark, so it's nice to see that queries are included here. In a single thread four large queries are executed in order, each of which is matching 9% to 18% of the data set. It would be nice to see a more selective set of queries, plus some concurrency on this test.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Benchmark - Insert&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;After the select benchmark completes, the table/collection is dropped and reloaded using file 2 from the prepare phase. This benchmark is different from the data load benchmark in that it does not utilize the servers bulk load functionality. I assume this is intended to show how the server will perform long term (after the initial data load completes), but a lack of indexes and no concurrency make this step largely uninteresting.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;b&gt;Benchmark - Size&lt;/b&gt;&lt;br /&gt;&lt;span&gt;After the data was bulk loaded (Data Load) a command is executed to determine how much disk space the unindexed form is consuming.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;b&gt;&lt;span&gt;Overall Thoughts&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;span&gt;While I don't think this benchmark will become a standard any time soon, there are some simple improvements to make the results more interesting:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Bulk loading without indexes is not necessarily a bad idea, but the time required to build indexes after the load completes should be measured and reported.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Size on disk should include secondary indexes.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Some of the select workload should be randomly selecting more specific data. Put it in a loop and make it concurrent.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Prior to starting the insert benchmark, create the secondary indexes. Also, make this test concurrent by instantiating several insert clients.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">TokuMX vs. PostgreSQL in EnterpriseDB's NoSQL Compression Benchmark</title>
		<link href="http://www.acmebenchmarking.com/2014/10/tokumx-vs-postgresql-in-enterprisedbs.html"/>
		<id>tag:blogger.com,1999:blog-8043938871710850997.post-8640088732703339828</id>
		<updated>2014-10-20T10:52:54+00:00</updated>
		<content type="html">&lt;span&gt;Since this is my first blog I feel it's necessary to introduce myself. I'm Tim Callaghan, I work at &lt;a href=&quot;http://www.tokutek.com/&quot; target=&quot;_blank&quot;&gt;Tokutek&lt;/a&gt; (makers of &lt;a href=&quot;http://www.tokutek.com/tokudb-for-mysql/&quot; target=&quot;_blank&quot;&gt;TokuDB&lt;/a&gt; and &lt;a href=&quot;http://www.tokutek.com/tokumx-for-mongodb/&quot; target=&quot;_blank&quot;&gt;TokuMX&lt;/a&gt;), and I love benchmarking. While some of the content on this blog will certainly be about Tokutek technologies, I plan on exploring a wide variety of others as well. These are strictly my own personal views and opinions, and comments/feedback are always welcome. Lets get started...&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;A few weeks ago I noticed an &lt;a href=&quot;http://blogs.enterprisedb.com/2014/09/24/postgres-outperforms-mongodb-and-ushers-in-new-developer-reality/&quot; target=&quot;_blank&quot;&gt;EnterpriseDB NoSQL Benchmark&lt;/a&gt; that measured Data Load, Insert, Select, and Size. It wasn't just a NoSQL benchmark, it was specifically calling out &lt;a href=&quot;http://www.mongodb.com/&quot; target=&quot;_blank&quot;&gt;MongoDB&lt;/a&gt; by declaring &quot;Postgres Outperforms MongoDB and Ushers in New Developer Reality&quot;. Now the &lt;a href=&quot;http://blogs.enterprisedb.com/author/marc_linster/&quot; target=&quot;_blank&quot;&gt;blogger&lt;/a&gt; had my attention, I needed to learn more, so I dug in.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I was concerned with how little the blog explained about the benchmark itself, the results were only presented as &quot;Relative Performance Comparisons&quot;. Was this an example of what &lt;a href=&quot;http://smalldatum.blogspot.com/&quot; target=&quot;_blank&quot;&gt;Mark Callaghan&lt;/a&gt; describes as &lt;a href=&quot;http://smalldatum.blogspot.com/2014/06/benchmarketing.html&quot; target=&quot;_blank&quot;&gt;benchmarketing&lt;/a&gt;?&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;I've created far too many benchmark applications in my life, and analyzed countless more. To EnterpriseDB's credit, they published their &lt;a href=&quot;https://github.com/EnterpriseDB/pg_nosql_benchmark&quot; target=&quot;_blank&quot;&gt;benchmark code&lt;/a&gt; on GitHub. After downloading the code and opening my editor I saw something I never would have imagined, a benchmark written completely in bash. &lt;i&gt;Yes, bash.&lt;/i&gt; I used to think I was a bash expert, but now I know differently.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The compression portion of the benchmark is simple. An extremely large JSON data set is created as a flat file, the flat file is loaded into MongoDB and Postgres, and the on-disk size is recorded for the compression comparison. Since the TokuMX binaries use the same names as MongoDB, I was able to easily run the test comparing TokuMX and Postgres. The blog stated that benchmark was intended to run without additional tuning, so I setup TokuMX to start with it's default configuration.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Results&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-r7jAN2KZ2PI/VET_UZOA-gI/AAAAAAAAB1c/QhAmRNFkzEk/s1600/20141020-ab-nosql-compression.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-r7jAN2KZ2PI/VET_UZOA-gI/AAAAAAAAB1c/QhAmRNFkzEk/s1600/20141020-ab-nosql-compression.png&quot; height=&quot;400&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Details&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;The 10 million document raw file 25,287 MB. Each technology is compared here:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Postgres 9.4 beta2 required 14,204 MB (56.17% raw size).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Postgres 9.4 beta3 &lt;u&gt;also&lt;/u&gt; required 14,204 MB (56.17% raw size). This surprised me, as I tested this newer beta of Postgres specifically because of the following release note:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;b&gt;&lt;i&gt;The JSON data set produced by this benchmark application contains very large amounts of redundant text. As a matter of fact, there are 11 &quot;base&quot; documents in total, each of which is only slightly modified with a random handful of numeric characters for each batch of 11 documents. So each batch of 11 documents is 99% identical to every other batch, and each batch is about 29KB in total.&lt;/i&gt;&lt;/b&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;MongoDB 2.6.4 required 41,035 MB (162.28% raw size). This is a well known behavior of MongoDB, as the default for &lt;a href=&quot;http://docs.mongodb.org/manual/core/storage/#power-of-2-sized-allocations&quot; target=&quot;_blank&quot;&gt;Power of 2 Sized Allocations&lt;/a&gt; was changed to &quot;enabled in MongoDB 2.6. This sizing strategy is meant to improve the chances that a document update can be done in-place, and thus reduce index updates.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Disabling Power of 2 Sized Allocations in MongoDB 2.6.4 reduced the required space to 27,871 MB (110.22% of raw size).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TokuMX 2.0.0 required 1,199 MB (4.74% raw size).&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Thoughts and Analysis&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;TokuMX compression was the winner, hands down. Compared to Postgres, TokuMX required 91.56% less space on disk (1,199 MB vs. 14,204 MB). Nothing more to say here, it wasn't even close.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;But lets be honest, &lt;b&gt;&lt;i&gt;this&amp;nbsp;&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;i&gt;compression benchmark is not interesting!&lt;/i&gt;&lt;/b&gt;&amp;nbsp;The data is simply too easily compressed. It shows that you should never accept benchmark results without understanding the benchmark itself. Plus you should make sure that the results are interesting to your specific use-case.&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I plan on reviewing load and query aspects of the benchmark in an upcoming blog. &lt;/span&gt;</content>
		<author>
			<name>Tim Callaghan</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.acmebenchmarking.com/</uri>
		</author>
		<source>
			<title type="html">Acme Benchmarking</title>
			<subtitle type="html">Is it fast? I'll let you know.</subtitle>
			<link rel="self" href="http://www.acmebenchmarking.com//feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-8043938871710850997</id>
			<updated>2015-06-03T00:20:03+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">MySQL isn't limited to nested-loop joins</title>
		<link href="http://www.xaprb.com/blog/2013/10/01/mysql-isnt-limited-to-nested-loop-joins/"/>
		<id>http://www.xaprb.com/blog/2013/10/01/mysql-isnt-limited-to-nested-loop-joins/</id>
		<updated>2013-10-01T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I have followed the &amp;ldquo;Use the Index, Luke!&amp;rdquo; blog for a while. Today Marcus &lt;a href=&quot;http://use-the-index-luke.com/blog/2013-10-01/mysql-is-to-sql-like-mongodb-to-nosql&quot;&gt;wrote&lt;/a&gt; that (I&amp;rsquo;ll paraphrase) MongoDB disgraces NoSQL the same way that MySQL disgraces SQL. I agree with a lot of this, actually, although I&amp;rsquo;m not sure I&amp;rsquo;d put it so strongly. People often like products for good reasons, and to think that legions of developers are stupid or ill-educated is suspect, in my opinion.&lt;/p&gt;

&lt;p&gt;But that wasn&amp;rsquo;t what I meant to write about. I wanted to point out something about the blog post that&amp;rsquo;s a little outdated. He wrote, and this time I&amp;rsquo;ll quote, &amp;ldquo;MySQL is rather poor at joining because is only supports nested loops joins. Most other SQL database implement the hash join and sort/merge join algorithms too.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s no longer true that MySQL doesn&amp;rsquo;t support these, and hasn&amp;rsquo;t been for a while, depending on which version of MySQL you look at. What&amp;rsquo;s slightly unfortunate, in my opinion, is that MySQL doesn&amp;rsquo;t call out in the documentation that they&amp;rsquo;re actually implemented. MySQL documentation talks about Multi-Range Read, Block Nested-Loop, and Batched Key Access join &amp;ldquo;optimizations.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Functionally, these are closely related to combinations of hash and sort-merge join algorithms, and really represent mixtures of features from them combined in different ways, depending on the exact query. Most &amp;ldquo;sophisticated&amp;rdquo; RDBMSs also implement a lot of subtle variations &amp;ndash; edge-case optimizations are really worthwhile. It is rarely as cut-and-dried as pure hash-join or sort-merge join. And in the end, there is always &amp;ndash; always &amp;ndash; iteration over rows to match them up, regardless of the data structure used, regardless of the RDBMS. MySQL happens to call these variations &amp;ldquo;nested loop join optimizations&amp;rdquo; and similar phrases, but that&amp;rsquo;s what they are in other RDBMSs too.&lt;/p&gt;

&lt;p&gt;MySQL does very well on many types of joins for which sort-merge and hash-join algorithms are designed. See, for example, &lt;a href=&quot;http://www.mysqlperformanceblog.com/2012/03/21/multi-range-read-mrr-in-mysql-5-6-and-mariadb-5-5/&quot;&gt;this blog post&lt;/a&gt; and &lt;a href=&quot;http://www.mysqlperformanceblog.com/2012/03/12/index-condition-pushdown-in-mysql-5-6-and-mariadb-5-5-and-its-performance-impact/&quot;&gt;this one&lt;/a&gt; and also &lt;a href=&quot;http://www.mysqlperformanceblog.com/2012/05/31/a-case-for-mariadbs-hash-joins/&quot;&gt;this one on MariaDB&amp;rsquo;s further optimizations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think the MySQL documentation could help a little by calling things names that normal users understand. The names we see in the documentation are really reflective of how the optimizer internals gurus think about the algorithms, in my opinion. I think the names describe the implementation, not the end result. I&amp;rsquo;d suggest phrasing it differently for general consumption by the DBA public. Perhaps something like &amp;ldquo;sort-merge join implemented with a _____ algorithm.&amp;rdquo; Or perhaps &amp;ndash; and I will admit I don&amp;rsquo;t keep the details fresh in my mind so I&amp;rsquo;m not the one to ask for the right answer &amp;ndash; perhaps the algorithms MySQL uses really aren&amp;rsquo;t as related or comparable as I think they are, and a different type of explanation is in order. But I bet a lot of DBAs from SQL Server and Oracle Database backgrounds would find it helpful to have an explanation in familiar terms. (This concludes my free and probably unwanted advice to the MySQL docs team!)&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">What TokuDB might mean for MongoDB</title>
		<link href="http://www.xaprb.com/blog/2013/04/29/what-tokudb-might-mean-for-mongodb/"/>
		<id>http://www.xaprb.com/blog/2013/04/29/what-tokudb-might-mean-for-mongodb/</id>
		<updated>2013-04-29T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Last week &lt;a href=&quot;http://www.tokutek.com/&quot;&gt;Tokutek&lt;/a&gt; &lt;a href=&quot;http://www.tokutek.com/2013/04/announcing-tokudb-v7-open-source-and-more/&quot;&gt;announced&lt;/a&gt; that they&amp;rsquo;re open-sourcing their TokuDB storage engine for MySQL. If you&amp;rsquo;re not familiar with TokuDB, it&amp;rsquo;s an ACID-compliant storage engine with a high-performance index technology known as fractal tree indexing. Fractal trees have a number of nice characteristics, but perhaps the most interesting is that they deliver consistently high performance under varying conditions, such as when data grows much larger than memory or is updated frequently. B-tree indexes tend to get fragmented over time, and exhibit a performance cliff when data doesn&amp;rsquo;t fit in memory anymore.&lt;/p&gt;

&lt;p&gt;The MySQL community is excited about having access to TokuDB&amp;rsquo;s source code, and rightly so. TokuDB is, broadly speaking, aimed at the same category of use cases as Oracle&amp;rsquo;s InnoDB, which has been MySQL&amp;rsquo;s leading storage engine for a long time.&lt;/p&gt;

&lt;p&gt;MySQL&amp;rsquo;s market size is large for an opensource product (roughly $500M to $1B USD, depending on who you talk to), and in a big pond, a stone causes wide ripples. I think the most significant implications, though, are for MongoDB. Tokutek has published a series of &lt;a href=&quot;http://www.tokutek.com/tag/mongodb/&quot;&gt;benchmarks of MongoDB performance with TokuDB&lt;/a&gt; as the storage engine instead of MongoDB&amp;rsquo;s default storage engine. The results are compelling.&lt;/p&gt;

&lt;p&gt;I think TokuDB will rapidly become the storage engine of choice for MongoDB, and could catapult MongoDB into the lead in the NoSQL database arena. This would have profound implications for opensource databases of all flavors, not just NoSQL databases.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth revisiting a bit of ancient history for some context.&lt;/p&gt;

&lt;p&gt;Way back in the olden days, MySQL&amp;rsquo;s main storage engine was MyISAM. MyISAM is non-transactional and has table-level locking, meaning that a write (update, insert, delete, or similar) blocked all concurrent access to the table. This is okay for some uses, and can even be very good in special cases, but in the general case it is a disaster. MyISAM introduced some special workarounds for common cases (such as permitting nonblocking inserts to occur at the end of the table), but in the end, you can&amp;rsquo;t fix table-level locking. A mixed workload needs storage that&amp;rsquo;s designed for high read and write concurrency without blocking.&lt;/p&gt;

&lt;p&gt;MyISAM had other problems, such as lacking transactions, being prone to data corruption, and long repair times after a crash.&lt;/p&gt;

&lt;p&gt;As a result, MySQL as a whole was only interesting to a minority of users. For demanding applications it was little more than a curiosity.&lt;/p&gt;

&lt;p&gt;Then came InnoDB. InnoDB introduced ACID transactions, automatic crash recovery, and most importantly, row-based locking and MVCC, which allowed highly concurrent access to rows, so readers and writers don&amp;rsquo;t block each other. InnoDB was the magic that made MySQL a credible choice for a wide range of use cases.&lt;/p&gt;

&lt;p&gt;Most of the interesting chapters in MySQL&amp;rsquo;s history have involved InnoDB in one way or another. To list some highlights: Oracle bought InnoDB&amp;rsquo;s creator Innobase Oy, MySQL scrambled to find a replacement (Maria, Falcon, PBXT), Sun&amp;rsquo;s decision to acquire MySQL was said to be influenced by Falcon, Percona created XtraDB, and Oracle acquired Sun. Things are settling down now, but it&amp;rsquo;s easy to forget how much of a soap opera the MySQL world has lived through because of InnoDB not being owned by MySQL.&lt;/p&gt;

&lt;p&gt;And in the middle of all this came NoSQL databases. In the past half-dozen years, more databases have been invented, popularized, and forgotten than I care to think about. In many cases, though, these databases were criticized as ignoring or reinventing (badly) decades of learning in relational database technology, and even computer science in general. I know I&amp;rsquo;ve looked at my share of face-palm code.&lt;/p&gt;

&lt;p&gt;Databases, by and large, depend on reliable, high-performance storage and retrieval subsystems more than anything else. Many of the NoSQL databases have interesting ideas built on top of bad, bad, bad storage code.&lt;/p&gt;

&lt;p&gt;MongoDB is a case in point. MongoDB reinvented some of the worst parts of MySQL all over again. Storage was initially little more than mmap over a file. I think Mark Callaghan put it best in 2009, when he said &amp;ldquo;Reinventing MyISAM is not a feature.&amp;rdquo; MongoDB&amp;rsquo;s storage at that time really was MyISAM-like. It&amp;rsquo;s improved somewhat since then, but it hasn&amp;rsquo;t had the wholesale rip-and-replace improvement that I think is needed. Not only that, but MongoDB as a whole is still (predictably) built around the limitations of the underlying storage, with coarse-grained locking.&lt;/p&gt;

&lt;p&gt;But MongoDB, like MySQL, has been relevant in spite of these shortcomings. Form your own opinion about why this is, but from my point of view there are two main reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB was born in an era when the popular databases were frustratingly slow and clunky to work with, and innovation was stalled due to the political drama surrounding them.&lt;/li&gt;
&lt;li&gt;MongoDB simply feels nice to developers. If you&amp;rsquo;re not a developer, this is a little hard to explain, but it just feels good, like your favorite pair of jeans. Like a hug from a good friend. Like a hammock and a summer day. The difference between an SQL database and MongoDB for many developers is like the difference between an iPod and a cheap knockoff MP3 player. I could go on and on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s difficult to overstate the importance of this, because it means that MongoDB may well become an enterprise database, despite what bad opinions you may have about it now. Why is this? It&amp;rsquo;s because developers are king in the modern IT enterprise. Developers determine what technologies get adopted in IT. CTOs like to think the decisions come from the top down, but I&amp;rsquo;ve seen it work the other way time and time again. Developers start to use something that frustrates them less than the alternatives, and a groundswell begins that&amp;rsquo;s impossible to stop. Someday the CTO discovers that the question of whether to use technology X was decided by a junior developer long ago and deployed to production, and now it&amp;rsquo;s too late.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve done it myself. At Crutchfield I hijacked the company-wide policy that migration from legacy VB6 to .NET would proceed along the lines of a transition to VB.NET. I was fighting through awful code day in and day out, and I knew that a more restrictive language would prevent a lot of bad practices. So I wrote several major systems in C# without asking permission. It&amp;rsquo;s a lot easier to get forgiveness than permission. Then I showed off what I&amp;rsquo;d done. When I left Crutchfield, the IT department had chosen C#, not VB.NET, as its language of the future (even though there were, and probably still are, major VB.NET applications).&lt;/p&gt;

&lt;p&gt;Similarly, at Crutchfield I was provided a 15-inch CRT monitor to work on. This was 2003, you understand. Even at that time, it was awful. How can you expect a developer to work on a flickering, small monitor? I bought my own large-screen LCD and put it in my cubicle. Management ordered me to remove it because it was causing a flood of &amp;ldquo;hey, how did Baron get a nice monitor?&amp;rdquo; questions, but the camel already had a nose under the tent. I took my monitor home, but not too long after that we all started to get nicer monitors. I brought my own nice chair to work, too. All told I probably forced Crutchfield to spend thousands of dollars upgrading equipment. You have to be careful about headstrong kids like me &amp;ndash; don&amp;rsquo;t turn your backs on us for a moment.&lt;/p&gt;

&lt;p&gt;This story illustrates why MongoDB is likely to become a major database: because developers enjoy working with it. It feels pleasant and elegant. Remember, most technology decisions are based on how people feel, not on facts. We&amp;rsquo;re not rational beings, so don&amp;rsquo;t expect the best solution to win. Expect people to choose what makes them happy.&lt;/p&gt;

&lt;p&gt;And with the availability of TokuDB, MongoDB is lovable by a lot more people. With reliable storage and transactions, uncool kids can like it too.&lt;/p&gt;

&lt;p&gt;It goes further than just the storage engine. The kernel of MongoDB has code that needs to be fixed, such as the coarse-grained locking code. Tokutek basically forked MongoDB in order to insert TokuDB into it. They had to, in order to get all that locking out of the way and allow MongoDB to shine with TokuDB on the backend.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure exactly how this will play out &amp;ndash; will Tokutek start offering a competitive product? Will there be opensource community-based forks of MongoDB that integrate TokuDB? Will 10gen do the engineering to offer TokuDB as a backend? Will 10gen and Tokutek partner to do the engineering and provide support? Will 10gen acquire Tokutek? Will a large company acquire both? You decide.&lt;/p&gt;

&lt;p&gt;But I believe that a few things are inevitable, and don&amp;rsquo;t require a crystal ball to guess.&lt;/p&gt;

&lt;p&gt;Anyone who cares about MongoDB is going to be using TokuDB as their storage backend within a matter of months. It&amp;rsquo;s happened before &amp;ndash; look at what happened to MySQL and InnoDB. Look at Riak; people dropped Bitcask like a hot potato when LevelDB storage arrived (although it hasn&amp;rsquo;t been a perfect solution).&lt;/p&gt;

&lt;p&gt;Just to be clear, I do not think that MongoDB&amp;rsquo;s parallels with MySQL&amp;rsquo;s history must inevitably repeat in all aspects of the story. The world of databases today (big data, cloud, mobile) is not in the same situation it was when MySQL was creeping into general awareness (web, gaming, social, general lack of good alternatives to commercial databases), and the reasons people use MongoDB now are different from the reasons people chose MySQL back in the day. Still, there&amp;rsquo;s a good chance that MySQL&amp;rsquo;s past can teach us about MongoDB&amp;rsquo;s future, and for some use cases, MongoDB deployments will soon accelerate rapidly. I expect a larger commercial ecosystem to emerge, too; right now the MongoDB market is worth tens of millions, and I&amp;rsquo;d guess in a few years we&amp;rsquo;ll look back and see a sharp inflection point in 2013 and 2014. TokuDB could help propel MongoDB&amp;rsquo;s market size into hundreds of millions of dollars, which is a position occupied uniquely by MySQL today in the opensource database world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=2UFc1pr2yUU&quot;&gt;It&amp;rsquo;s getting real&lt;/a&gt; in the MongoDB world &amp;ndash; this is going to be interesting to watch.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">Bold predictions on which NoSQL databases will survive</title>
		<link href="http://www.xaprb.com/blog/2013/01/10/bold-predictions-on-which-nosql-databases-will-survive/"/>
		<id>http://www.xaprb.com/blog/2013/01/10/bold-predictions-on-which-nosql-databases-will-survive/</id>
		<updated>2013-01-10T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In case you&amp;rsquo;ve been &lt;a href=&quot;http://www.youtube.com/watch?v=cvXqm0RdJms&quot;&gt;living under a rock&lt;/a&gt; for the last 5 years, the NoSQL movement has changed. There was a time when everyone &amp;ndash; EVERYONE &amp;ndash; was dumping on relational databases, and MySQL in particular. Nonsense like &amp;ldquo;SQL itself is inherently unscalable&amp;rdquo; routinely came out of the mouths of otherwise usually sensible people. But that&amp;rsquo;s cooled off a little bit, thank heavens.&lt;/p&gt;

&lt;p&gt;And what&amp;rsquo;s the new hotness? Well, Big Data, of course! But I digress. In the world of databases, it&amp;rsquo;s move over NoSQL, heeeeeere&amp;rsquo;s NewSQL. I&amp;rsquo;m talkin&amp;rsquo; NuoDB, Clustrix, MySQL Cluster (NDB), and so forth. A lot of people now recognize that it wasn&amp;rsquo;t SQL or the relational model that was a problem &amp;ndash; it was the implementations that had some issues. The pendulum has swung a little away from vilifying SQL, and we don&amp;rsquo;t talk about NoSQL as much as we talk about document-oriented or key-value or whatever.&lt;/p&gt;

&lt;p&gt;Does that spell death for NoSQL databases? Not in my opinion. But I am just in the mood to stick my neck out a bit today, so I&amp;rsquo;m going to do something I don&amp;rsquo;t normally do &amp;ndash; predict the future. Here&amp;rsquo;s my prediction: &lt;strong&gt;there may be many NoSQL databases that live long and healthy lives, but among them will probably be MongoDB, Redis, and Riak&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Discuss!&lt;/p&gt;

&lt;p&gt;PS: this prediction is about what I think will happen. If I get one out of three right, I&amp;rsquo;ll be happy. It&amp;rsquo;s not an endorsement of any database, dismissal of any other database, or an opinion about what I think &lt;em&gt;should&lt;/em&gt; happen. Limitations and exclusions apply. Subject to credit approval, see store for details.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">Avoiding statement-based replication warnings</title>
		<link href="http://www.xaprb.com/blog/2012/08/23/avoiding-statement-based-replication-warnings/"/>
		<id>http://www.xaprb.com/blog/2012/08/23/avoiding-statement-based-replication-warnings/</id>
		<updated>2012-08-23T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Although not perfect, MySQL replication was probably the killer feature that made MySQL the default database for web applications some time ago. Since then, MySQL replication has been improved greatly, with such notable changes as row-based replication. At the same time, the replication engineering team has made MySQL replication more conservative and less forgiving of foot-gun errors. These have gone a long way towards helping users avoid some of the problems that made replication sometimes drift out of sync with the master copy, sometimes silently.&lt;/p&gt;

&lt;p&gt;In some cases I think the strictness has gone a little too far. One example is the server&amp;rsquo;s identification of statements that are unsafe for replication because they are nondeterministic. Here is a statement in an application I manage, which is designed to claim some work from a queue. After running this statement, the application checks if any rows were affected, and if so, it then fetches and processes the rows:&lt;/p&gt;

&lt;pre&gt;update pending_jobs set token = ?
where token is null
  and (owner_pid is null or owner_pid &lt;pre&gt; ?)
order by id
limit 1;&lt;/pre&gt;

&lt;p&gt;MySQL will write to the server&amp;rsquo;s error log when this statement is issued and binlog_format=STATEMENT, because of the presence of a LIMIT in the statement: &lt;em&gt;120823 20:59:12 [Warning] Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. The statement is unsafe because it uses a LIMIT clause. This is unsafe because the set of rows included cannot be predicted. Statement: [statement follows]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This becomes a problem very quickly, because in fact the statement is deterministic and the rows to be affected can be predicted perfectly. The server is just being overly strict. The general technique illustrated here is a superior alternative to some other ways of &lt;a href=&quot;http://www.engineyard.com/blog/2011/5-subtle-ways-youre-using-mysql-as-a-queue-and-why-itll-bite-you/&quot;&gt;implementing a queue in a database table&lt;/a&gt;. But if a superior alternative floods the error log with spurious messages, it must be avoided anyway.&lt;/p&gt;

&lt;p&gt;The solution I chose in this case is a blend of SQL and application code. Part of the logic &amp;ndash; the limit &amp;ndash; must be handled in the application code, and pulled out of the UPDATE statement so the server will consider it to be deterministic. Here is pseudocode for the result:&lt;/p&gt;

&lt;pre&gt;
function claim_a_job() {
   $pid   = get_pid();
   $token = md5(rand(), time(), $pid);
   @jobs  = query(
            &quot;select id from pending_jobs
             where token is null and (owner_pid is null or owner_pid &lt;pre&gt; ?)
             order by id&quot;, $pid);
   foreach ( $job in @jobs ) {
      next unless query(&quot;update pending_jobs set token=?
                         where token is null and id=?&quot;, $token, $job);
      return $job;
   }
   return null;
}
&lt;/pre&gt;

&lt;p&gt;This code finds all unclaimed rows and tries to claim each one in turn. If there&amp;rsquo;s a race condition and another worker has claimed the job in the meantime, no rows will be updated. If the UPDATE affects a row, then the function claimed the job successfully, and the job&amp;rsquo;s ID is returned. The most important thing, however, is that the SQL lacks any constructs such as LIMIT that might cause errors to be spewed into the log. I want my logs to be silent so that I can detect when something really important actually happens.&lt;/p&gt;

&lt;p&gt;Percona Server has a feature to disable logging this warning, which is a mixed blessing. I want to find all such queries and examine them, because some of them might be a legitimate risk to replication integrity. If I disable the logging, it becomes much harder, though I can potentially do it by inspecting TCP traffic instead. I do wish that official MySQL supported the ability to silence warnings selectively, however.&lt;/p&gt;

&lt;p&gt;Another possible solution would be to switch to row-based binary logging, which comes with many other benefits as well. But such a change is not to be taken lightly; it requires a careful assessment of the server and its workload, lest there be unintended consequences.&lt;/p&gt;

&lt;p&gt;An even better solution would be to implement some additional features in the server. Many of the features that developers like the most about NoSQL databases such as MongoDB and Redis (or even PostgreSQL) are special-case behaviors to simplify things that are awkward to do in most databases. Examples include atomically adding and removing from a queue, and features to avoid polling, such as LISTEN and NOTIFY.&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">Automated, integrated sharding: the new killer database feature</title>
		<link href="http://www.xaprb.com/blog/2012/04/09/automated-integrated-sharding-the-new-killer-database-feature/"/>
		<id>http://www.xaprb.com/blog/2012/04/09/automated-integrated-sharding-the-new-killer-database-feature/</id>
		<updated>2012-04-09T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;MySQL became wildly successful in part because it had built-in, simple replication. Sure, it had lots of interesting failure scenarios and was not great at first &amp;mdash; it is much better these days &amp;mdash; but it was nevertheless successful because there was a single, out-of-the-box, not-very-complex way to do replication. I have opined many times before that this was one of the killer features missing from PostgreSQL. I think that can large explain why MySQL became more popular more quickly.&lt;/p&gt;

&lt;p&gt;The new killer feature is automatic sharding, in my opinion. If you&amp;rsquo;re not accustomed to the word, &amp;ldquo;sharding&amp;rdquo; means partitioning of a large dataset across many servers.&lt;/p&gt;

&lt;p&gt;It is easy to poke fun at &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&amp;rsquo;s&lt;/a&gt; current limitations, but for all that, it has a story to tell about sharding. There is One Right Way To Do It in MongoDB, and it&amp;rsquo;s a part of the product.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t see sharding being added into the core of MySQL itself, but there are some very interesting efforts headed towards MySQL. There are at least the following companies providing sharding via a proxy or middleware solution, with a lot of other features also available in some products:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scalebase.com/&quot;&gt;Scalebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scalearc.com/&quot;&gt;ScaleArc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dbshards.com/&quot;&gt;dbShards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.parelastic.com/&quot;&gt;ParElastic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, there are community-based efforts, such as &lt;a href=&quot;http://code.google.com/p/shard-query/&quot;&gt;Shard-Query&lt;/a&gt; and the &lt;a href=&quot;http://spiderformysql.com/&quot;&gt;Spider&lt;/a&gt; storage engine. And there&amp;rsquo;s &lt;a href=&quot;http://mysql.com/products/cluster/&quot;&gt;MySQL (NDB) Cluster&lt;/a&gt;, and commercial rip-out-and-plug-in replacements for MySQL such as &lt;a href=&quot;http://www.clustrix.com/&quot;&gt;Clustrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Am I missing any? I probably am. You can see and talk to many of these companies at this week&amp;rsquo;s &lt;a href=&quot;http://www.percona.com/live/mysql-conference-2012/&quot;&gt;MySQL conference&lt;/a&gt;, by the way.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">My sessions at the O'Reilly MySQL Conference 2011</title>
		<link href="http://www.xaprb.com/blog/2011/01/29/my-sessions-at-the-oreilly-mysql-conference-2011/"/>
		<id>http://www.xaprb.com/blog/2011/01/29/my-sessions-at-the-oreilly-mysql-conference-2011/</id>
		<updated>2011-01-29T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I&amp;rsquo;ll be presenting several sessions at the &lt;a href=&quot;http://en.oreilly.com/mysql2011/&quot;&gt;O&amp;rsquo;Reilly MySQL Conference &amp;amp; Expo 2011&lt;/a&gt;, which is April 11-14 in Santa Clara, California. I recommend this conference to anyone interested in open-source databases including MySQL, PostgreSQL, CouchDB, MongoDB, and others. There is very good coverage of a diverse list of open-source databases.&lt;/p&gt;

&lt;p&gt;My sessions are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.oreilly.com/mysql2011/public/schedule/detail/17808&quot;&gt;Building on Strengths, Learning from Differences&lt;/a&gt;: a keynote address on the open-source database ecosystem, how we got here, and what we can do to make the most of the future.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.oreilly.com/mysql2011/public/schedule/detail/17153&quot;&gt;Forecasting MySQL Performance and Scalability&lt;/a&gt;: mathematical models for forecasting performance and scalability that actually work and are not hard to do. (&lt;a href=&quot;http://www.mysqlperformanceblog.com/2011/01/26/modeling-innodb-scalability-on-multi-core-servers/&quot;&gt;Example&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.oreilly.com/mysql2011/public/schedule/detail/17129&quot;&gt;The Aspersa System Administrator&amp;rsquo;s Toolkit&lt;/a&gt;: this is an under-appreciated toolkit at the moment, but it could be the next Maatkit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, I am listed as presenting &lt;a href=&quot;http://en.oreilly.com/mysql2011/public/schedule/detail/17142&quot;&gt;Diagnosing and Fixing MySQL Performance Problems&lt;/a&gt;, a 3-hour tutorial on how to find and solve performance problems with swift and definite results. However, I actually have a scheduling conflict and a couple of my colleagues will present this instead.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">Version 1.1.8 of Better Cacti Templates released</title>
		<link href="http://www.xaprb.com/blog/2011/01/22/version-1-1-8-of-better-cacti-templates-released/"/>
		<id>http://www.xaprb.com/blog/2011/01/22/version-1-1-8-of-better-cacti-templates-released/</id>
		<updated>2011-01-22T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I&amp;rsquo;ve released version 1.1.8 of the &lt;a href=&quot;http://code.google.com/p/mysql-cacti-templates/&quot;&gt;Better Cacti Templates&lt;/a&gt; project. This release includes a bunch of bug fixes and several important new graphs. There are &lt;a href=&quot;http://code.google.com/p/mysql-cacti-templates/wiki/MySQLTemplates#MySQL_Query_Response_Time_%28Microseconds%29&quot;&gt;graphs&lt;/a&gt; for the new &lt;a href=&quot;http://www.percona.com/docs/wiki/percona-server:features:response_time_distribution&quot;&gt;response-time statistics exposed in Percona Server&lt;/a&gt;, and a new set of graphs for &lt;a href=&quot;http://code.google.com/p/mysql-cacti-templates/wiki/MongoDBTemplates&quot;&gt;MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://vividcortex.com/&quot;&gt;VividCortex&lt;/a&gt; is the startup I founded in 2012. It&amp;rsquo;s the easiest way to monitor what
your servers are doing in production and I consider it far superior to Cacti. VividCortex offers &lt;a href=&quot;https://vividcortex.com/monitoring/mysql/&quot;&gt;MySQL performance
monitoring&lt;/a&gt; and &lt;a href=&quot;https://vividcortex.com/monitoring/postgres/&quot;&gt;PostgreSQL
performance management&lt;/a&gt; among many
other features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;a href=&quot;http://code.google.com/p/mysql-cacti-templates/wiki/UpgradingTemplates&quot;&gt;upgrade instructions&lt;/a&gt; on the project wiki for this and all releases. There is also a comprehensive tutorial on &lt;a href=&quot;http://code.google.com/p/mysql-cacti-templates/wiki/CreatingGraphs&quot;&gt;how to create your own graphs and templates&lt;/a&gt; with this project. Use the &lt;a href=&quot;http://code.google.com/p/mysql-cacti-templates/issues/list&quot;&gt;project issue tracker&lt;/a&gt; (&lt;strong&gt;not the comments on this post!&lt;/strong&gt;) to view and report issues, and use the &lt;a href=&quot;http://groups.google.com/group/better-cacti-templates&quot;&gt;project mailing list&lt;/a&gt; to discuss the templates and scripts.&lt;/p&gt;

&lt;p&gt;The full changelog follows.&lt;/p&gt;

&lt;pre&gt;
2011-01-22: version 1.1.8

  * The cache file names could conflict due to omitting --port (issue 171).
  * Load-average parsing did not work correctly at high load (issue 170).
  * The --mpds option to make-template.pl did not create new inputs (issue 133).
  * The url and port were reversed in the Nginx commandline (issue 149).
  * Added $nc_cmd to ss_get_by_ssh.php (issue 154, issue 152).
  * InnoDB Transactions and other graphs showed NaN instead of 0 (issue 159).
  * Added graphs for Percona Server response-time distribution (issue 158).
  * Added graphs for MongoDB (issue 136).
  * Added a minimum option to the template construction logic (issue 169).
  * Added memtotal for Memory (issue 146).
  * make-template.pl sanity checks were too strict (issue 168).
&lt;/pre&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">Schedule for MySQL-and-beyond conference is live</title>
		<link href="http://www.xaprb.com/blog/2010/12/19/schedule-for-mysql-and-beyond-conference-is-live/"/>
		<id>http://www.xaprb.com/blog/2010/12/19/schedule-for-mysql-and-beyond-conference-is-live/</id>
		<updated>2010-12-19T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http://en.oreilly.com/mysql2011/&quot;&gt;O&amp;rsquo;Reilly&amp;rsquo;s 2011 edition of the MySQL conference&lt;/a&gt; has an expanded agenda, with good representation from Postgres, CouchDB, MongoDB, and others. Take a look at &lt;a href=&quot;http://en.oreilly.com/mysql2011/public/schedule/full&quot;&gt;the full schedule listing&lt;/a&gt;, which is being filled out as talks are approved and the speakers verify that they&amp;rsquo;ll give the session.&lt;/p&gt;

&lt;p&gt;I am certainly looking forward to this year&amp;rsquo;s event. A tremendous amount of progress has landed in GA versions of open-source databases this year. To name just a couple, there&amp;rsquo;s a new version of Postgres (9.0) with built-in replication and many more improvements; there&amp;rsquo;s MySQL 5.5 GA; there&amp;rsquo;s the HandlerSocket NoSQL interface to MySQL; Drizzle has a beta release; and the list goes on. I believe that this conference will have balanced and representative coverage of what&amp;rsquo;s really important to users. It isn&amp;rsquo;t dominated by any vendor this year; O&amp;rsquo;Reilly is running the conference independently, and the committee members represent a broad spectrum of databases themselves.&lt;/p&gt;

&lt;p&gt;In short, I am happier than I&amp;rsquo;ve ever been about this great and unique conference. It&amp;rsquo;s definitely going to be the best year so far. Thank you O&amp;rsquo;Reilly for holding it, and thank you to all the great speakers, and thanks to all the companies who sponsor the event.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">A review of MongoDB, the Definitive Guide by Chodorow and Dirolf</title>
		<link href="http://www.xaprb.com/blog/2010/12/14/a-review-of-mongodb-the-definitive-guide-by-chodorow-and-dirolf/"/>
		<id>http://www.xaprb.com/blog/2010/12/14/a-review-of-mongodb-the-definitive-guide-by-chodorow-and-dirolf/</id>
		<updated>2010-12-14T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;
  &lt;div id=&quot;attachment_2114&quot; class=&quot;wp-caption alignleft&quot;&gt;
    &lt;a href=&quot;http://www.amazon.com/dp/1449381561?tag=xaprb-20&quot;&gt;&lt;img src=&quot;http://www.xaprb.com/media/2010/12/mongodb-definitive-guide.gif&quot; alt=&quot;MongoDB, the Definitive Guide&quot; title=&quot;MongoDB, the Definitive Guide&quot; width=&quot;180&quot; height=&quot;236&quot; class=&quot;size-full wp-image-2114&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;
      MongoDB, the Definitive Guide
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/dp/1449381561?tag=xaprb-20&quot;&gt;MongoDB, the Definitive Guide&lt;/a&gt;, by Kristina Chodorow and Michael Dirolf, 2010. About 200 pages. (Here&amp;rsquo;s a &lt;a href=&quot;http://oreilly.com/catalog/0636920001096&quot;&gt;link to the publisher&amp;rsquo;s site&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;This is a good introduction to MongoDB, mostly from the application developer&amp;rsquo;s point of view. After reading through this, I felt that I understood the concepts well, although I am not a MongoDB expert, so I can&amp;rsquo;t pretend to be a fact-checker. The topics are clearly and logically presented for the most part; there is a small amount of repetition in one of the appendixes, but I don&amp;rsquo;t mind that. The writing and editing is top-notch, as I&amp;rsquo;ve come to expect from O&amp;rsquo;Reilly.&lt;/p&gt;

&lt;p&gt;Read this book if you want to learn what MongoDB is, what it does, and how to use it. Don&amp;rsquo;t expect that you will learn everything there is to know about topics such as administration and tuning, although it&amp;rsquo;ll be a good start. (The MongoDB documentation is an excellent reference to continue your education in those areas.)&lt;/p&gt;

&lt;p&gt;You might be pleasantly surprised at the lack of hype in this book. It wasn&amp;rsquo;t written by wide-eyed fanboys, and it does mention the weaknesses of MongoDB, although it understandably doesn&amp;rsquo;t spend any time bashing MongoDB for having shortcomings. I think you&amp;rsquo;ll get a balanced view of the database&amp;rsquo;s strengths and weaknesses, certainly enough to make a responsible decision about whether it&amp;rsquo;s worth investigating more deeply.&lt;/p&gt;

&lt;p&gt;To sum up, as I wrote to the authors, &amp;ldquo;Nice book. Very well written, very clear and objective.&amp;rdquo;&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">There's a European OpenSQL Camp coming up</title>
		<link href="http://www.xaprb.com/blog/2010/06/29/theres-a-european-opensql-camp-coming-up/"/>
		<id>http://www.xaprb.com/blog/2010/06/29/theres-a-european-opensql-camp-coming-up/</id>
		<updated>2010-06-29T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In addition to the Boston edition, there&amp;rsquo;s an &lt;a href=&quot;http://opensqlcamp.org/Events/FrOSCon2010/&quot;&gt;OpenSQL Camp at the same time and place as FrOSCon&lt;/a&gt; mid-August in Germany. The call for papers is open until July 11th. As always, the conference is about all kinds of open-source databases: MySQL and PostgreSQL are only two of the obvious ones; MongoDB and Cassandra featured prominently at the last one I attended, and SQLite was well represented at the first one.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">OpenSQL Camp Boston 2010</title>
		<link href="http://www.xaprb.com/blog/2010/06/25/opensql-camp-boston-2010/"/>
		<id>http://www.xaprb.com/blog/2010/06/25/opensql-camp-boston-2010/</id>
		<updated>2010-06-25T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Sheeri and others are organizing another incarnation of &lt;a href=&quot;http://opensqlcamp.org/Events/Boston2010/&quot;&gt;OpenSQL Camp in October in Boston&lt;/a&gt;. You ought to go! It&amp;rsquo;s relevant to MySQL, PostgreSQL, SQLite, and lots of the newer generation of databases &amp;ndash; MongoDB, Cassandra, and so on.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

	<entry xml:lang="en-us">
		<title type="html">Recap of Portland OpenSQL Camp 2009</title>
		<link href="http://www.xaprb.com/blog/2009/11/17/recap-of-portland-opensql-camp-2009/"/>
		<id>http://www.xaprb.com/blog/2009/11/17/recap-of-portland-opensql-camp-2009/</id>
		<updated>2009-11-17T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;I was at &lt;a href=&quot;http://opensqlcamp.org/Events/Portland2009/&quot;&gt;OpenSQL Camp 2009 in Portland&lt;/a&gt; last weekend. I thought the event was very well done. On Friday we had a pizza party at Old Town Pizza, which was awesome. Saturday and Sunday were breakfast, sessions, lunch (yum), and sessions and hacking. These were held at &lt;a href=&quot;http://www.soukllc.com/&quot;&gt;souk&lt;/a&gt;, a co-working space. After 5PM, people got together for dinner, beer, etc.&lt;/p&gt;

&lt;p&gt;I presented on mk-query-digest &amp;ndash; a live demo of features requested by the audience. Sessions from others that I thought were particularly good included ones on CouchDB and MongoDB. I mixed up the time and missed the session from Tokutek on how fractal tree indexes work. I&amp;rsquo;ll try to watch the video if that one was taped.&lt;/p&gt;

&lt;p&gt;During the hackathons, Daniel and I worked on Maatkit. We are laying groundwork for a more powerful mk-query-digest.&lt;/p&gt;

&lt;p&gt;As you may know, I created OpenSQL Camp. But I was not involved in organizing this or the previous event in Germany, which I think is great. I talked briefly with Eric and Selena about seeing if we could put together a recipe to make the process easy for folks to organize their own. We should be able to lay out checklists and timelines of major things &amp;ndash; location, shirts, sponsorship, budgeting, food. Eric and Selena got great food, much better than the Panera catering I had for the first event. Those kinds of decisions and results should be recorded. It would be great to be able to treat it like a franchise so anyone could just add water and make their own.&lt;/p&gt;

&lt;p&gt;I also might be willing to help organize another on the East Coast, perhaps as soon as next year if I can reduce my workload enough to have the time. I&amp;rsquo;d probably want to do something in or near Washington DC, which is a more convenient location with better public transport than my hometown of Charlottesville.&lt;/p&gt;

&lt;p&gt;It all started out as a response to &lt;a href=&quot;http://groups.google.com/group/oursql-conference&quot;&gt;complaints&lt;/a&gt; about MySQL&amp;rsquo;s annual conference not being a user&amp;rsquo;s conference, but nobody actually doing anything about it. I decided to do something about it, in a more inclusive way. And judging by the attendees and talks at the two I&amp;rsquo;ve gone to, people were happy to say yes to that. I think if there are continued events, that&amp;rsquo;s the ultimate measure of success.&lt;/p&gt;</content>
		<author>
			<name>Baron Schwartz</name>
			<uri>http://www.xaprb.com/tags/mongodb/</uri>
		</author>
		<source>
			<title type="html">Baron Schwartz</title>
			<link rel="self" href="http://www.xaprb.com/tags/mongodb/index.xml"/>
			<id>http://www.xaprb.com/tags/mongodb/index.xml</id>
			<updated>2015-06-02T22:10:02+00:00</updated>
			<rights type="html">Copyright (c) 2015</rights>
		</source>
	</entry>

</feed>
